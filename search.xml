<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>部署和添加域名</title>
      <link href="/post/26f271be.html"/>
      <url>/post/26f271be.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、Netlify建站"><a href="#一、Netlify建站" class="headerlink" title="一、Netlify建站"></a>一、Netlify建站</h1><h2 id="1-1-注册"><a href="#1-1-注册" class="headerlink" title="1.1 注册"></a>1.1 注册</h2><p>去官网进行注册<a href="https://www.netlify.com/">Netlify</a></p><p>绑定自己的GitHub账号</p><h2 id="1-2-导入GitHub仓库"><a href="#1-2-导入GitHub仓库" class="headerlink" title="1.2 导入GitHub仓库"></a>1.2 导入GitHub仓库</h2><blockquote><center>根据提示操作进行,一切默认</center></blockquote><p><img src="https://s2.loli.net/2023/03/26/9YFsDfw65bTSaEW.png" alt="image-20230326222940859"></p><h2 id="1-3-查看部署好的网站"><a href="#1-3-查看部署好的网站" class="headerlink" title="1.3 查看部署好的网站"></a>1.3 查看部署好的网站</h2><p>我的通过Netlify部署完是：<a href="https://yhhomea.netlify.app/">yhhomea.netlify.app</a>【这里还没有绑定自己的域名，下图的已经绑定域名】</p><p><img src="https://s2.loli.net/2023/03/26/HoM3eDCNpcduwnl.png" alt="image-20230326223506287"></p><blockquote><p>现在打开Netlify部署的网址打开速度较慢，后面通过使用ClouldFlare  CDN加速来提高访问速度</p></blockquote><h1 id="二、配置域名"><a href="#二、配置域名" class="headerlink" title="二、配置域名"></a>二、配置域名</h1><h2 id="2-1-购买域名（新用户1元一年"><a href="#2-1-购买域名（新用户1元一年" class="headerlink" title="2.1 购买域名（新用户1元一年)"></a>2.1 购买域名（新用户1元一年)</h2><blockquote><p>这里推荐新用户购买</p></blockquote><p><img src="https://s2.loli.net/2023/03/26/buvGL4TYMCHnm8V.png" alt="image-20230326224318175"></p><blockquote><p>在购买域名前，要先进行实名认证</p></blockquote><p><img src="https://s2.loli.net/2023/03/26/QoeKvZHVMU341Ik.png" alt="image-20230326224358372"></p><blockquote><p>根据提示进行实名认证</p></blockquote><h2 id="2-2-域名解析"><a href="#2-2-域名解析" class="headerlink" title="2.2 域名解析"></a>2.2 域名解析</h2><p>打开阿里云域名控制台，找到自己购买的域名</p><p><img src="https://s2.loli.net/2023/03/26/JyHadFNrPITWSlf.png" alt="image-20230326224602967"></p><p><img src="https://s2.loli.net/2023/03/26/Q5ATXNgWs9R23vn.png" alt="image-20230326224642133"></p><blockquote><p>根据下图继续，添加两条解析</p></blockquote><p><img src="https://s2.loli.net/2023/03/26/AlXurgvtOdJQ9sy.png" alt="image-20230326224849545"></p><h2 id="2-3-Netlify中添加自己的域名"><a href="#2-3-Netlify中添加自己的域名" class="headerlink" title="2.3 Netlify中添加自己的域名"></a>2.3 Netlify中添加自己的域名</h2><img src="https://s2.loli.net/2023/03/26/nydREVZoWtSPMDG.png" alt="image-20230326225009874" style="zoom:67%;" /><img src="https://s2.loli.net/2023/03/26/7syDUiYP9EhTSZp.png" alt="image-20230326225113745" style="zoom:67%;" /><img src="https://s2.loli.net/2023/03/26/FJglKmABp1Izj5u.png" alt="image-20230326225221188" style="zoom:67%;" /><h1 id="三、ClouldFlare加速"><a href="#三、ClouldFlare加速" class="headerlink" title="三、ClouldFlare加速"></a>三、ClouldFlare加速</h1><h2 id="3-1-注册Clouldflare并登陆"><a href="#3-1-注册Clouldflare并登陆" class="headerlink" title="3.1 注册Clouldflare并登陆"></a>3.1 注册<a href="https://www.cloudflare.com/zh-cn/">Clouldflare</a>并登陆</h2><p>这里可能需要挂梯子</p><h2 id="3-2-添加站点"><a href="#3-2-添加站点" class="headerlink" title="3.2 添加站点"></a>3.2 添加站点</h2><img src="https://s2.loli.net/2023/03/26/JVQou3i1CfENLUz.png" alt="image-20230326225419354" style="zoom:67%;" /><img src="https://s2.loli.net/2023/03/26/v3l7cda1qsToMPp.png" alt="image-20230326225444129" style="zoom:67%;" /><img src="https://s2.loli.net/2023/03/26/jcLBAosISvO1u4Z.png" alt="image-20230326225524687" style="zoom:67%;" /><h2 id="3-3-阿里云配置DNS"><a href="#3-3-阿里云配置DNS" class="headerlink" title="3.3 阿里云配置DNS"></a>3.3 阿里云配置DNS</h2><blockquote><p>找到下图所示的两个NS</p></blockquote><p><img src="https://s2.loli.net/2023/03/26/gntAQIUDRl9VHLz.png" alt="image-20230326225800489"></p><blockquote><p>进入阿里云域名控制台，找到你购买的域名，点击管理</p></blockquote><p><img src="https://s2.loli.net/2023/03/26/BcjDAxHO71gYCpW.png" alt="image-20230326225906299"></p><img src="https://s2.loli.net/2023/03/26/cs1Ll4k7rPmfgB5.png" alt="image-20230326230006959" style="zoom:67%;" /><p><img src="https://s2.loli.net/2023/03/26/nxGMFyVPKcAZzbq.png" alt="image-20230326230042311"></p><blockquote><p>完成后点击确定</p></blockquote><h2 id="3-4-等待clouldflare确定邮箱"><a href="#3-4-等待clouldflare确定邮箱" class="headerlink" title="3.4 等待clouldflare确定邮箱"></a>3.4 等待clouldflare确定邮箱</h2><p>配置完成后，clouldflare会有邮件通知</p><img src="https://s2.loli.net/2023/03/26/igL8BXW3AsuEvcS.png" alt="image-20230326230339133" style="zoom:50%;" /><h1 id="四、配置成功后最终效果"><a href="#四、配置成功后最终效果" class="headerlink" title="四、配置成功后最终效果"></a>四、配置成功后最终效果</h1><blockquote><ul><li><p><img src="https://s2.loli.net/2023/03/26/mfAPFpOywDj8U79.png" alt="image-20230326230411162"></p></li><li><p><img src="https://s2.loli.net/2023/03/26/EgNHVdR9nsBCfjK.png" alt="image-20230326230506557"></p></li><li><p><img src="https://s2.loli.net/2023/03/26/LPuqYxpoNhnivdX.png" alt="image-20230326230524184"></p></li><li><p>你购买的域名网址可以访问博客</p></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建</title>
      <link href="/post/9639fcc6.html"/>
      <url>/post/9639fcc6.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>环境准备：</p><p>1.安装git</p><p>2.安装node.js</p><p>3.最好下载一个代码编辑器（例如：VScode、Sublime Text、notepad++等）</p></blockquote><h1 id="一、安装HEXO"><a href="#一、安装HEXO" class="headerlink" title="一、安装HEXO"></a>一、安装HEXO</h1><h2 id="打开cmd，输入以下命令"><a href="#打开cmd，输入以下命令" class="headerlink" title="打开cmd，输入以下命令"></a>打开cmd，输入以下命令</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h3 id="报错及解决方法"><a href="#报错及解决方法" class="headerlink" title="报错及解决方法"></a>报错及解决方法</h3><p><img src="https://s2.loli.net/2023/03/23/1mHePG8cLuF7ARD.png" alt="image-20230323223026426"></p><p>参考这篇博客，文档的权限进行提升：</p><blockquote><p><a href="https://blog.csdn.net/qq_44075310/article/details/128255366">(2条消息) npm安装报错（npm ERR! code EPERM npm ERR! syscall mkdir npm ERR! path C:\Program Files\nodejs\node_ca…）_晴雷的博客-CSDN博客</a></p></blockquote><p>如果发现，根据博客里面的步骤进行更改时，无法修改某一文档的权限时，根据报错时的提醒，单独修改某一文件夹的权限</p><p><img src="https://s2.loli.net/2023/03/23/mJWjPwkTDLsMrvc.png" alt="image-20230323224706032"></p><h1 id="二、初始化化文件夹"><a href="#二、初始化化文件夹" class="headerlink" title="二、初始化化文件夹"></a>二、初始化化文件夹</h1><h3 id="2-1-选择一个盘，创建一个blog文件夹"><a href="#2-1-选择一个盘，创建一个blog文件夹" class="headerlink" title="2.1 选择一个盘，创建一个blog文件夹"></a>2.1 选择一个盘，创建一个blog文件夹</h3><p><img src="https://s2.loli.net/2023/03/23/ULxgmTq8zs2l4Ev.png" alt="image-20230323225108988"></p><h3 id="2-2-通过cmd窗口，切换盘符，进入该文件夹"><a href="#2-2-通过cmd窗口，切换盘符，进入该文件夹" class="headerlink" title="2.2 通过cmd窗口，切换盘符，进入该文件夹"></a>2.2 通过cmd窗口，切换盘符，进入该文件夹</h3><p><img src="https://s2.loli.net/2023/03/23/HDnZmhvbCo9Qiz7.png" alt="image-20230323225304833"></p><h3 id="2-3-初始化"><a href="#2-3-初始化" class="headerlink" title="2.3 初始化"></a>2.3 初始化</h3><p>在blog文件夹下输入以下指令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>如果出现以下错误</p><p><img src="https://s2.loli.net/2023/03/23/R8S2yiOZkTXqx9h.png" alt="image-20230323225645297"></p><p>多试几次，网络原因，克隆失败（可以直接开加速器或者挂梯子）</p><p>出现Start blogging with Hexo!表示初始化成功</p><p><img src="https://s2.loli.net/2023/03/23/8kzA6oFwhSdQr1n.png" alt="image-20230323225756201"></p><h1 id="三、搭建"><a href="#三、搭建" class="headerlink" title="三、搭建"></a>三、搭建</h1><h3 id="3-1-继续输入以下指令"><a href="#3-1-继续输入以下指令" class="headerlink" title="3.1 继续输入以下指令"></a>3.1 继续输入以下指令</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/23/OaWmFYKiQX1HgBp.png" alt="image-20230323230053462"></p><blockquote><p>cmd窗口不要关闭</p></blockquote><h3 id="3-2-打开blog文件夹下的public文件夹，查看是否搭建成功"><a href="#3-2-打开blog文件夹下的public文件夹，查看是否搭建成功" class="headerlink" title="3.2 打开blog文件夹下的public文件夹，查看是否搭建成功"></a>3.2 打开blog文件夹下的public文件夹，查看是否搭建成功</h3><img src="https://s2.loli.net/2023/03/23/wMeFHWntC3Yy17q.png" alt="image-20230323230346257" style="zoom:50%;" /><h3 id="3-3-点击index-html文件，浏览器会显示下图的效果"><a href="#3-3-点击index-html文件，浏览器会显示下图的效果" class="headerlink" title="3.3 点击index.html文件，浏览器会显示下图的效果"></a>3.3 点击index.html文件，浏览器会显示下图的效果</h3><p><img src="https://s2.loli.net/2023/03/23/9UjsuiTxXIflerY.png" alt="image-20230323230416908"></p><img src="https://s2.loli.net/2023/03/23/V9s7rADvjtCawuM.png" alt="image-20230323230452052" style="zoom:50%;" /><h3 id="3-4-在cmd窗口继续输入以下指令，复制生成的网址，在本地端口打开页面"><a href="#3-4-在cmd窗口继续输入以下指令，复制生成的网址，在本地端口打开页面" class="headerlink" title="3.4 在cmd窗口继续输入以下指令，复制生成的网址，在本地端口打开页面"></a>3.4 在cmd窗口继续输入以下指令，复制生成的网址，在本地端口打开页面</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/23/T1jIzSqscwOrNUt.png" alt="image-20230323230657681"></p><p><img src="https://s2.loli.net/2023/03/23/FshmeH7CI8NPVB1.png" alt="image-20230323230730114"></p><h3 id="3-5-查看成功后，按Ctrl-C关闭端口"><a href="#3-5-查看成功后，按Ctrl-C关闭端口" class="headerlink" title="3.5 查看成功后，按Ctrl+C关闭端口"></a>3.5 查看成功后，按Ctrl+C关闭端口</h3><h1 id="四、安装git依赖"><a href="#四、安装git依赖" class="headerlink" title="四、安装git依赖"></a>四、安装git依赖</h1><p>在blog文件夹目录下，在cmd窗口中，继续输入以下指令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/24/JnX3VgZPzGBrIka.png" alt="image-20230324120103121"></p><h1 id="五、在GitHub上创建git仓库"><a href="#五、在GitHub上创建git仓库" class="headerlink" title="五、在GitHub上创建git仓库"></a>五、在GitHub上创建git仓库</h1><p>仓库名必须以github name.github.io命名</p><p><img src="https://s2.loli.net/2023/03/24/4QyaT1htoEMNxnI.png" alt="image-20230324120932625"></p><blockquote><p>注意：这里的名称一定是你GitHub的用户名，不然后面会加载不出页面渲染</p></blockquote><h1 id="六、本地博客上传GitHub"><a href="#六、本地博客上传GitHub" class="headerlink" title="六、本地博客上传GitHub"></a>六、本地博客上传GitHub</h1><h2 id="6-1-修改-config-yml文件"><a href="#6-1-修改-config-yml文件" class="headerlink" title="6.1 修改-config.yml文件"></a>6.1 修改-config.yml文件</h2><p>以txt文本格式打开</p><img src="https://s2.loli.net/2023/03/24/SBDO5LGRpWdMqXt.png" alt="image-20230324121118217" style="zoom:50%;" /><p>将下图中的信息进行替换</p><p><img src="https://s2.loli.net/2023/03/24/4aSfP9wOTquW5yl.png" alt="image-20230324121207400"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: 你的github地址</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/24/ZBOJ8o3Fx4McGPK.png" alt="image-20230324121239755"></p><h2 id="6-2-上传"><a href="#6-2-上传" class="headerlink" title="6.2 上传"></a>6.2 上传</h2><p>在blog文件路径下，在cmd窗口中依次输入以下指令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d    </span><br></pre></td></tr></table></figure><p>运行结果应该如下：（如果第一次使用git，可能会提示登录一下GitHub，登录一下就可以了）</p><img src="https://s2.loli.net/2023/03/24/qEx43iGH2BnpjSM.png" alt="image-20230324121649495" style="zoom:50%;" /><img src="https://s2.loli.net/2023/03/24/awkxFn2hE73CIpR.png" alt="image-20230324121719393" style="zoom:50%;" /><h1 id="七、开启page服务"><a href="#七、开启page服务" class="headerlink" title="七、开启page服务"></a>七、开启page服务</h1><p>在网页进入GitHub，打开新建的上传博客的仓库，进行如下设置，打开page服务</p><p><img src="https://s2.loli.net/2023/03/24/UgXMbRCpH4NTd78.png" alt="image-20230324122134527"></p><p><img src="https://s2.loli.net/2023/03/24/RULtjzcw4fWMFvK.png" alt="image-20230324122324612"></p><p>保存后，等待一会，当出现下图所示后，就可以通过网址访问个人blog了</p><p><img src="https://s2.loli.net/2023/03/24/yUdV8CZR7Yah34E.png" alt="image-20230324122421585"></p><p>进入显示的页面，效果如下：</p><p><img src="https://s2.loli.net/2023/03/24/eszi1CkB9pqlZAQ.png" alt="image-20230324133255698"></p><blockquote><p>如果出现以下情况，请查看仓库名称是否为GitHub用户名</p><p><img src="https://s2.loli.net/2023/03/24/53PAZgIRyDbzKT9.png" alt="image-20230324133238423"></p></blockquote><h1 id="八、主题更换"><a href="#八、主题更换" class="headerlink" title="八、主题更换"></a>八、主题更换</h1><blockquote><p>官方主题网址：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p></blockquote><h2 id="8-1-Butterfly-主题安装"><a href="#8-1-Butterfly-主题安装" class="headerlink" title="8.1 Butterfly 主题安装"></a>8.1 Butterfly 主题安装</h2><p>在blog根目录下，在cmd窗口中输入下列指令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https:<span class="comment">//github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/25/m5k8J7YMEBxIeiV.png" alt="image-20230324203523825"></p><h2 id="8-2-应用主题"><a href="#8-2-应用主题" class="headerlink" title="8.2 应用主题"></a>8.2 应用主题</h2><p>修改blog根目录下的 <code>_config.yml</code>，把主题改为 butterfly：</p><p><img src="https://s2.loli.net/2023/03/25/wNgfWbOldsvo7Km.png" alt="image-20230324203700738"></p><h2 id="8-3-安装插件"><a href="#8-3-安装插件" class="headerlink" title="8.3 安装插件"></a>8.3 安装插件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/25/dOEqBzgCStL3iDG.png" alt="image-20230324204300190"></p><p>剩余内容请参考下面这篇博客👇</p><p>Butterfly 主题美化：<a href="http://haiyong.site/post/22e1d5da.html">http://haiyong.site/post/22e1d5da.html</a></p><h1 id="九、发布"><a href="#九、发布" class="headerlink" title="九、发布"></a>九、发布</h1><p>在blog文件夹下，找到source，然后进入_posts，在该文件夹路径，右键进入git bash here</p><p><img src="https://s2.loli.net/2023/03/25/XTxkNdpcHFt3OEC.png" alt="image-20230324200056954"></p><p>在git bash here输入下列指令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-deployer-git</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/25/XzUsfPhSkot8mlY.png" alt="image-20230324200355195"></p><p>继续输入下列指令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="title class_">post</span> <span class="string">&quot;新建博客文章名&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g  &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p>在本地查看，无误后提交云端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ADC模数转换器</title>
      <link href="/post/f2152a76.html"/>
      <url>/post/f2152a76.html</url>
      
        <content type="html"><![CDATA[<h1 id="ADC模数转换器"><a href="#ADC模数转换器" class="headerlink" title="ADC模数转换器"></a>ADC模数转换器</h1><p>ADC（Analog-Digital Converter）模拟-数字转换器</p><p>ADC可以将引脚上连续变化的模拟电压转换为内存中存储的数字变量，建立模拟电路到数字电路的桥梁</p><blockquote><p>DAC是数字-模拟转换器，但是PWM比DAC简单好用，一般使用DAC驱动电机，目前DAC主要应用于波形生成领域</p></blockquote><p>12位逐次逼近型ADC，1us转换时间</p><blockquote><p>分辨率：0 ~ 2^12^ -1,即0 ~ 4095 ，位数越高量化结果越精细，分辨率越高</p></blockquote><p>输入电压范围：0 ~ 3.3V，转换结果范围：0 ~ 4095 </p><p>18个输入通道，可测量16个外部和2个内部信号源</p><blockquote><p>STM32F103C8T6 ADC资源：ADC1、ADC2，10个外部输入通道</p></blockquote><p>规则组和注入组两个转换单元</p><blockquote><p>一次启动一个组，可以连续转换多个数据</p></blockquote><p>模拟看门狗自动监测输入电压范围</p><blockquote><p>检测指定通道，当数值超出阈值时，自动申请中断，无需手动在主函数中进行判断</p></blockquote><h2 id="一、逐次逼近型ADC"><a href="#一、逐次逼近型ADC" class="headerlink" title="一、逐次逼近型ADC"></a>一、逐次逼近型ADC</h2><img src="https://s2.loli.net/2022/12/11/Clv4Ln169sB5NJg.png" alt="image-20221211123629747" style="zoom:67%;" /><h2 id="二、ADC框图"><a href="#二、ADC框图" class="headerlink" title="二、ADC框图"></a>二、ADC框图</h2><h3 id="2-1完整框图"><a href="#2-1完整框图" class="headerlink" title="2.1完整框图"></a>2.1完整框图</h3><p><img src="https://s2.loli.net/2022/12/11/jhnaY34cfZxdgOy.png" alt="image-20221211131053264"></p><h3 id="2-2-分析"><a href="#2-2-分析" class="headerlink" title="2.2 分析"></a>2.2 分析</h3><p><img src="https://s2.loli.net/2022/12/11/gLi4wkvq5Ds8NSj.png" alt="image-20221211134242951"></p><hr><hr><p><img src="https://s2.loli.net/2022/12/11/LlVwzEJ1khespa7.png" alt="image-20221211143348853"></p><h3 id="2-3-输入通道对应引脚"><a href="#2-3-输入通道对应引脚" class="headerlink" title="2.3 输入通道对应引脚"></a>2.3 输入通道对应引脚</h3><table><thead><tr><th align="center"><strong>通道</strong></th><th align="center"><strong>ADC1</strong></th><th align="center"><strong>ADC2</strong></th><th align="center"><strong>ADC3</strong></th></tr></thead><tbody><tr><td align="center">通道0</td><td align="center">PA0</td><td align="center">PA0</td><td align="center">PA0</td></tr><tr><td align="center">通道1</td><td align="center">PA1</td><td align="center">PA1</td><td align="center">PA1</td></tr><tr><td align="center">通道2</td><td align="center">PA2</td><td align="center">PA2</td><td align="center">PA2</td></tr><tr><td align="center">通道3</td><td align="center">PA3</td><td align="center">PA3</td><td align="center">PA3</td></tr><tr><td align="center">通道4</td><td align="center">PA4</td><td align="center">PA4</td><td align="center">PF6</td></tr><tr><td align="center">通道5</td><td align="center">PA5</td><td align="center">PA5</td><td align="center">PF7</td></tr><tr><td align="center">通道6</td><td align="center">PA6</td><td align="center">PA6</td><td align="center">PF8</td></tr><tr><td align="center">通道7</td><td align="center">PA7</td><td align="center">PA7</td><td align="center">PF9</td></tr><tr><td align="center">通道8</td><td align="center">PB0</td><td align="center">PB0</td><td align="center">PF10</td></tr><tr><td align="center">通道9</td><td align="center">PB1</td><td align="center">PB1</td><td align="center"></td></tr><tr><td align="center">通道10</td><td align="center">PC0</td><td align="center">PC0</td><td align="center">PC0</td></tr><tr><td align="center">通道11</td><td align="center">PC1</td><td align="center">PC1</td><td align="center">PC1</td></tr><tr><td align="center">通道12</td><td align="center">PC2</td><td align="center">PC2</td><td align="center">PC2</td></tr><tr><td align="center">通道13</td><td align="center">PC3</td><td align="center">PC3</td><td align="center">PC3</td></tr><tr><td align="center">通道14</td><td align="center">PC4</td><td align="center">PC4</td><td align="center"></td></tr><tr><td align="center">通道15</td><td align="center">PC5</td><td align="center">PC5</td><td align="center"></td></tr><tr><td align="center">通道16</td><td align="center">温度传感器</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">通道17</td><td align="center">内部参考电压</td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="三、转换模式"><a href="#三、转换模式" class="headerlink" title="三、转换模式"></a>三、转换模式</h2><p>1、单次转换，非扫描模式</p><p>2、连续转换，非扫描模式</p><p>3、单次转换，扫描模式</p><p>4、连续转换，扫描模式</p><p><img src="https://s2.loli.net/2022/12/11/bnOVq5uNzW2ZRaQ.png" alt="image-20221211144033797"></p><p><img src="https://s2.loli.net/2022/12/11/4tWJ6XFqIz8Gefh.png" alt="image-20221211144356149"></p><h3 id="四、触发控制"><a href="#四、触发控制" class="headerlink" title="四、触发控制"></a>四、触发控制</h3><p><img src="https://s2.loli.net/2022/12/11/jWKTdzchoHPu3xR.png" alt="image-20221211144655873"></p><h3 id="五、数据对齐"><a href="#五、数据对齐" class="headerlink" title="五、数据对齐"></a>五、数据对齐</h3><p>右对齐</p><p><img src="https://s2.loli.net/2022/12/11/WN8xMrd2opSHPFl.png" alt="image-20221211144528294"></p><p>左对齐</p><p><img src="https://s2.loli.net/2022/12/11/3NEQ1p57oOMHdqy.png" alt="image-20221211144533308"></p><p>一般使用右对齐，读出数据直接就是转换结果</p><p>左对齐可以降低精度，只读高八位，舍去后四位</p><h3 id="六、转换时间"><a href="#六、转换时间" class="headerlink" title="六、转换时间"></a>六、转换时间</h3><p>AD转换的步骤：采样，保持，量化，编码</p><blockquote><p>其中采样、保持放一起，量化、编码放一起</p></blockquote><p>STM32 ADC的总转换时间为：T<del>CONV</del> &#x3D; 采样时间 + 12.5个ADC周期</p><blockquote><p>例如：当ADCCLK&#x3D;14MHz，采样时间为1.5个ADC周期</p><p>T<del>CONV</del> &#x3D; 1.5 + 12.5 &#x3D; 14个ADC周期 &#x3D; 1μs</p></blockquote><h3 id="七、校准"><a href="#七、校准" class="headerlink" title="七、校准"></a>七、校准</h3><p>ADC有一个内置自校准模式。校准可大幅减小因内部电容器组的变化而造成的准精度误差。校准期间，在每个电容器上都会计算出一个误差修正码(数字值)，这个码用于消除在随后的转换中每个电容器上产生的误差</p><p>建议在每次上电后执行一次校准</p><p>启动校准前， ADC必须处于关电状态超过至少两个ADC时钟周期</p><h2 id="实例：AD单通道和AD多通道"><a href="#实例：AD单通道和AD多通道" class="headerlink" title="实例：AD单通道和AD多通道"></a>实例：AD单通道和AD多通道</h2><h3 id="AD单通道"><a href="#AD单通道" class="headerlink" title="AD单通道"></a>AD单通道</h3><p>功能实现：用电位计产生0~3.3V的连续变化的模拟电压，在LCD显示转换后的数据和处理后得到的电压值</p><p>AD.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">AD_Init</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"><span class="comment">//开启时钟</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,ENABLE);</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);</span><br><span class="line">RCC_ADCCLKConfig(RCC_PCLK2_Div6);</span><br><span class="line"></span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;<span class="comment">//模拟输入</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择规则组的输入通道</span></span><br><span class="line">ADC_RegularChannelConfig(ADC1,ADC_Channel_0,<span class="number">1</span>,ADC_SampleTime_55Cycles5);</span><br><span class="line"><span class="comment">//初始化ADC</span></span><br><span class="line">ADC_InitTypeDef ADC_InitTypeDefstructure;</span><br><span class="line">ADC_InitTypeDefstructure.ADC_DataAlign = ADC_DataAlign_Right;<span class="comment">//对齐方式</span></span><br><span class="line">ADC_InitTypeDefstructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;<span class="comment">//触发源选择</span></span><br><span class="line">ADC_InitTypeDefstructure.ADC_Mode = ADC_Mode_Independent;<span class="comment">//配置ADC工作模式</span></span><br><span class="line">ADC_InitTypeDefstructure.ADC_ContinuousConvMode = DISABLE;<span class="comment">//连续转换</span></span><br><span class="line">ADC_InitTypeDefstructure.ADC_ScanConvMode = DISABLE;<span class="comment">//扫描转换</span></span><br><span class="line">ADC_InitTypeDefstructure.ADC_NbrOfChannel = <span class="number">1</span>;<span class="comment">//通道数目</span></span><br><span class="line"></span><br><span class="line">ADC_Init(ADC1,&amp;ADC_InitTypeDefstructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启ADC</span></span><br><span class="line">ADC_Cmd(ADC1,ENABLE);</span><br><span class="line"><span class="comment">//校准ADC</span></span><br><span class="line">ADC_ResetCalibration(ADC1);<span class="comment">//复位校准</span></span><br><span class="line"><span class="keyword">while</span>(ADC_GetResetCalibrationStatus(ADC1) == SET);<span class="comment">//等待校准完成</span></span><br><span class="line">ADC_StartCalibration(ADC1);<span class="comment">//复位校准</span></span><br><span class="line"><span class="keyword">while</span>(ADC_GetCalibrationStatus(ADC1) == SET);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">AD_GetValue</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">ADC_SoftwareStartConvCmd(ADC1,ENABLE);<span class="comment">//软件触发转换</span></span><br><span class="line"><span class="keyword">while</span>(ADC_GetFlagStatus(ADC1,ADC_FLAG_EOC) == RESET);<span class="comment">//获取标志位状态</span></span><br><span class="line"><span class="keyword">return</span> ADC_GetConversionValue(ADC1);<span class="comment">//获取转换值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>AD.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __AD_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __AD_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">AD_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">AD_GetValue</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;OLED.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AD.h&quot;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> value;</span><br><span class="line"><span class="type">float</span> V;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">OLED_Init();</span><br><span class="line">AD_Init();</span><br><span class="line"></span><br><span class="line">OLED_ShowString(<span class="number">1</span>,<span class="number">1</span>,<span class="string">&quot;ADValue:&quot;</span>);</span><br><span class="line">OLED_ShowString(<span class="number">2</span>,<span class="number">1</span>,<span class="string">&quot;V:0.00V&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">value = AD_GetValue();</span><br><span class="line">V = (<span class="type">float</span>)value /<span class="number">4095</span> * <span class="number">3.3</span>;</span><br><span class="line">OLED_ShowNum(<span class="number">1</span>,<span class="number">9</span>,value,<span class="number">4</span>);</span><br><span class="line">OLED_ShowNum(<span class="number">2</span>,<span class="number">3</span>,V,<span class="number">1</span>);</span><br><span class="line">OLED_ShowNum(<span class="number">2</span>,<span class="number">5</span>,(<span class="type">uint16_t</span>)(V*<span class="number">100</span>)%<span class="number">100</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>OLED.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_Init</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);</span><br><span class="line">    </span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_2;</span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">GPIO_SetBits(GPIOA, GPIO_Pin_1 | GPIO_Pin_2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED1_on</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">GPIO_ResetBits(GPIOA, GPIO_Pin_1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED1_off</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">GPIO_SetBits(GPIOA, GPIO_Pin_1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED1_Turn</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(GPIO_ReadOutputDataBit(GPIOA,GPIO_Pin_1) == <span class="number">0</span>)&#123;</span><br><span class="line">GPIO_SetBits(GPIOA, GPIO_Pin_1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">GPIO_ResetBits(GPIOA, GPIO_Pin_1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED2_on</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">GPIO_ResetBits(GPIOA, GPIO_Pin_2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED2_off</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">GPIO_SetBits(GPIOA, GPIO_Pin_2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED2_Turn</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(GPIO_ReadOutputDataBit(GPIOA,GPIO_Pin_2) == <span class="number">0</span>)&#123;</span><br><span class="line">GPIO_SetBits(GPIOA, GPIO_Pin_2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">GPIO_ResetBits(GPIOA, GPIO_Pin_2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>OLED.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __LCD_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __LCD_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED1_on</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED1_off</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED2_on</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED2_off</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED1_Turn</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED2_Turn</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="AD多通道"><a href="#AD多通道" class="headerlink" title="AD多通道"></a>AD多通道</h3><p>功能实现：同时测光敏、热敏、反射红外、电位计的转换值，并显示</p><p>AD.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">AD_Init</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"><span class="comment">//开启时钟</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,ENABLE);</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);</span><br><span class="line">RCC_ADCCLKConfig(RCC_PCLK2_Div6);</span><br><span class="line"></span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;<span class="comment">//模拟输入</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化ADC</span></span><br><span class="line">ADC_InitTypeDef ADC_InitTypeDefstructure;</span><br><span class="line">ADC_InitTypeDefstructure.ADC_DataAlign = ADC_DataAlign_Right;<span class="comment">//对齐方式</span></span><br><span class="line">ADC_InitTypeDefstructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;<span class="comment">//触发源选择</span></span><br><span class="line">ADC_InitTypeDefstructure.ADC_Mode = ADC_Mode_Independent;<span class="comment">//配置ADC工作模式</span></span><br><span class="line">ADC_InitTypeDefstructure.ADC_ContinuousConvMode = DISABLE;<span class="comment">//连续转换</span></span><br><span class="line">ADC_InitTypeDefstructure.ADC_ScanConvMode = DISABLE;<span class="comment">//扫描转换</span></span><br><span class="line">ADC_InitTypeDefstructure.ADC_NbrOfChannel = <span class="number">1</span>;<span class="comment">//通道数目</span></span><br><span class="line"></span><br><span class="line">ADC_Init(ADC1,&amp;ADC_InitTypeDefstructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启ADC</span></span><br><span class="line">ADC_Cmd(ADC1,ENABLE);</span><br><span class="line"><span class="comment">//校准ADC</span></span><br><span class="line">ADC_ResetCalibration(ADC1);<span class="comment">//复位校准</span></span><br><span class="line"><span class="keyword">while</span>(ADC_GetResetCalibrationStatus(ADC1) == SET);<span class="comment">//等待校准完成</span></span><br><span class="line">ADC_StartCalibration(ADC1);<span class="comment">//复位校准</span></span><br><span class="line"><span class="keyword">while</span>(ADC_GetCalibrationStatus(ADC1) == SET);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">AD_GetValue</span><span class="params">(<span class="type">uint8_t</span> ADC_Channel)</span>&#123;</span><br><span class="line"><span class="comment">//选择规则组的输入通道</span></span><br><span class="line">ADC_RegularChannelConfig(ADC1,ADC_Channel,<span class="number">1</span>,ADC_SampleTime_55Cycles5);</span><br><span class="line">ADC_SoftwareStartConvCmd(ADC1,ENABLE);<span class="comment">//软件触发转换</span></span><br><span class="line"><span class="keyword">while</span>(ADC_GetFlagStatus(ADC1,ADC_FLAG_EOC) == RESET);<span class="comment">//获取标志位状态</span></span><br><span class="line"><span class="keyword">return</span> ADC_GetConversionValue(ADC1);<span class="comment">//获取转换值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>AD.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __AD_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __AD_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">AD_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">AD_GetValue</span><span class="params">(<span class="type">uint8_t</span> ADC_Channel)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;OLED.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AD.h&quot;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> AD0,AD1,AD2,AD3;</span><br><span class="line"><span class="type">float</span> V;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">OLED_Init();</span><br><span class="line">AD_Init();</span><br><span class="line"></span><br><span class="line">OLED_ShowString(<span class="number">1</span>,<span class="number">1</span>,<span class="string">&quot;AD0:&quot;</span>);</span><br><span class="line">OLED_ShowString(<span class="number">2</span>,<span class="number">1</span>,<span class="string">&quot;AD1:&quot;</span>);</span><br><span class="line">OLED_ShowString(<span class="number">3</span>,<span class="number">1</span>,<span class="string">&quot;AD2:&quot;</span>);</span><br><span class="line">OLED_ShowString(<span class="number">4</span>,<span class="number">1</span>,<span class="string">&quot;AD3:&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">AD0 = AD_GetValue(ADC_Channel_0);</span><br><span class="line">AD1 = AD_GetValue(ADC_Channel_1);</span><br><span class="line">AD2 = AD_GetValue(ADC_Channel_2);</span><br><span class="line">AD3 = AD_GetValue(ADC_Channel_3);</span><br><span class="line"></span><br><span class="line">OLED_ShowNum(<span class="number">1</span>,<span class="number">5</span>,AD0,<span class="number">4</span>);</span><br><span class="line">OLED_ShowNum(<span class="number">2</span>,<span class="number">5</span>,AD1,<span class="number">4</span>);</span><br><span class="line">OLED_ShowNum(<span class="number">3</span>,<span class="number">5</span>,AD2,<span class="number">4</span>);</span><br><span class="line">OLED_ShowNum(<span class="number">4</span>,<span class="number">5</span>,AD3,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>OLED.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_Init</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);</span><br><span class="line">    </span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_2;</span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">GPIO_SetBits(GPIOA, GPIO_Pin_1 | GPIO_Pin_2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED1_on</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">GPIO_ResetBits(GPIOA, GPIO_Pin_1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED1_off</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">GPIO_SetBits(GPIOA, GPIO_Pin_1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED1_Turn</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(GPIO_ReadOutputDataBit(GPIOA,GPIO_Pin_1) == <span class="number">0</span>)&#123;</span><br><span class="line">GPIO_SetBits(GPIOA, GPIO_Pin_1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">GPIO_ResetBits(GPIOA, GPIO_Pin_1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED2_on</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">GPIO_ResetBits(GPIOA, GPIO_Pin_2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED2_off</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">GPIO_SetBits(GPIOA, GPIO_Pin_2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED2_Turn</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(GPIO_ReadOutputDataBit(GPIOA,GPIO_Pin_2) == <span class="number">0</span>)&#123;</span><br><span class="line">GPIO_SetBits(GPIOA, GPIO_Pin_2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">GPIO_ResetBits(GPIOA, GPIO_Pin_2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>OLED.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __LCD_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __LCD_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED1_on</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED1_off</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED2_on</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED2_off</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED1_Turn</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED2_Turn</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定时器</title>
      <link href="/post/2e5216dd.html"/>
      <url>/post/2e5216dd.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、TIM定时中断"><a href="#一、TIM定时中断" class="headerlink" title="一、TIM定时中断"></a>一、TIM定时中断</h1><p>定时器可以对输入的时钟进行<strong>计数</strong>，并在计数值达到设定值时<strong>触发中断</strong> </p><blockquote><p>例：stm32中定时器的基准时钟一般是72MHZ，【周期是频率的倒数1T &#x3D; 1&#x2F;72us】，如果计数72个，就是1us，计数72000个，就是1ms</p></blockquote><p>16位计数器、预分频器、自动重装寄存器的时基单元，在72MHz计数时钟下可以实现最大59.65s的定时</p><blockquote><p>计数器：进行计数的寄存器，每来一个时钟，计数器加一</p><p>预分频器：对计数器时钟进行分频</p><p>自动重装寄存器：计数器的目标值，设定计多少数申请中断</p><p>2^16^&#x3D;65536  预分频器和自动重装寄存器设置最大，定时器时间最大为59.65s【1&#x2F;(72MHZ&#x2F;65536*65536)】</p></blockquote><p>不仅具备基本的定时中断功能，而且还包含内外时钟源选择、输入捕获、输出比较、编码器接口、主从触发模式等多种功能</p><p>根据复杂度和应用场景分为了高级定时器、通用定时器、基本定时器三种类型</p><h1 id="二、定时器类型"><a href="#二、定时器类型" class="headerlink" title="二、定时器类型"></a>二、定时器类型</h1><table><thead><tr><th align="center"><strong>类型</strong></th><th align="center"><strong>编号</strong></th><th align="center"><strong>总线</strong></th><th align="center"><strong>功能</strong></th></tr></thead><tbody><tr><td align="center">高级定时器</td><td align="center">TIM1、TIM8</td><td align="center">APB2</td><td align="center">拥有通用定时器全部功能，并额外具有重复计数器、死区生成、互补输出、刹车输入等功能</td></tr><tr><td align="center">通用定时器</td><td align="center">TIM2、TIM3、TIM4、TIM5</td><td align="center">APB1</td><td align="center">拥有基本定时器全部功能，并额外具有内外时钟源选择、输入捕获、输出比较、编码器接口、主从触发模式等功能</td></tr><tr><td align="center">基本定时器</td><td align="center">TIM6、TIM7</td><td align="center">APB1</td><td align="center">拥有定时中断、主模式触发DAC的功能</td></tr></tbody></table><blockquote><p>STM32F103C8T6定时器资源：TIM1、TIM2、TIM3、TIM4</p></blockquote><h2 id="2-1基本定时器"><a href="#2-1基本定时器" class="headerlink" title="2.1基本定时器"></a>2.1基本定时器</h2><p>TIM6和TIM7定时器的主要功能包括：</p><ul><li><p>16位自动重装载累加计数器 </p></li><li><p>16位可编程(可实时修改)预分频器，用于对输入的时钟按系数为1～65536之间的任意数值分频</p></li><li><p>触发DAC的同步电路 </p></li><li><p>在更新事件(计数器溢出)时产生中断&#x2F;DMA请求</p></li></ul><img src="https://s2.loli.net/2022/11/29/xXP9tsyWfS4B2Hc.png" alt="image-20221126150307421" style="zoom:67%;" /><h3 id="2-1-1分频的作用"><a href="#2-1-1分频的作用" class="headerlink" title="2.1.1分频的作用"></a>2.1.1分频的作用</h3><p>便于计算，计时更加精确</p><ul><li><p>以12MHZ为例：</p><ol><li><p>不分频</p><p>一个时钟周期为 T &#x3D; 1&#x2F;12 us，如果我们需要1us，需要12T，这个很好理解吧，但是我们使用的时候经常是要以秒（s）微秒（ms）进行计时的，当我们需要1ms的时候，我们就需要计数12000T，这个数是已经很大了</p></li><li><p>12分频</p><p>12分频后，12MHZ变为1MHZ，一个时钟周期为 T &#x3D; 1&#x2F;1 us &#x3D; 1us，如果我们需要1us，需要1T；需要1ms时，只需要1000T</p></li></ol></li></ul><p>​我们很清楚的看到分频以后，计一次数就是1us，这不但利用我们去计算定时时间，而且计算的次数明显减少了，那么为什么说计数次数减少就可以提高精度呢？可以想一下平时使用的钟表，当我们使用的时间长了，表就会不太准，时钟也是一样，我们计数次数多了，难免会产生误差，一次两次小误差肯能影响不大，但是成千上百次误差的影响那可就大了</p><p>定时时间更长</p><ul><li><p>以72MHZ为例</p><ol><li><p>不分频</p><p>一个时钟周期为 T &#x3D; 1&#x2F;72 us，16位定时器的范围是0~65535，那么一个范围计数完成的时间大概是0.94ms</p></li><li><p>3分频</p><p>3分频后，72MHZ变为24MHZ，一个时钟周期为 T &#x3D; 1&#x2F;24 us ，那么一个范围计数完成的时间大概是2.73ms</p></li><li><p>72分频</p><p>72MHZ变为1MHZ，一个时钟周期为 T &#x3D;1 us ，那么一个范围计数完成的时间大概是65.5ms</p></li></ol></li></ul><p>​由于分频以后，到达同一个计数时间的计数次数减少，所以在16位的定时器范围内，定时器的定时时间最大值增加【定时器计数最大值是不可改变的，2^16^，所以我们只能改变频率来改变计数最大时间】</p><h3 id="2-1-2预分频器"><a href="#2-1-2预分频器" class="headerlink" title="2.1.2预分频器"></a>2.1.2预分频器</h3><p>​预分频可以以系数介于1至65536之间的任意数值对计数器时钟分频。它是通过一个16位寄存器(TIMx_PSC)的计数实现分频。因为TIMx_PSC控制寄存器具有缓冲，可以在运行过程中改变它的数值，新的预分频数值将在下一个更新事件时起作用</p><p><strong>实际分频数 &#x3D; 分频器的值 + 1</strong></p><p><strong>计数器计数频率：CK_CNT &#x3D; CK_PSC &#x2F; (PSC + 1)</strong></p><img src="https://s2.loli.net/2022/11/29/LiHjea9y3CtvoT6.png" alt="image-20221126150902581" style="zoom: 67%;" /><p>​缓冲器（也叫作影子寄存器），是实际起作用的寄存器。比如：在计数过程中突然改变分频系数，那么一个周期前半部分和后半部分的频率就会不一致，这可能会产生一些不好的影响。但是加上缓冲器后，改变分频系数并不会立即改变这一个周期的频率，它会等到这个周期结束后，产生更新事件，才会去改变，这样就保证了stm32的严谨性</p><h3 id="2-1-3计数模式"><a href="#2-1-3计数模式" class="headerlink" title="2.1.3计数模式"></a>2.1.3计数模式</h3><img src="https://s2.loli.net/2022/11/29/CmI3bSXLFlxajKH.png" alt="image-20221126190730609" style="zoom: 50%;" /><p><strong>计数器溢出频率：CK_CNT_OV  &#x3D;  CK_CNT &#x2F; (ARR + 1)  &#x3D;  CK_PSC &#x2F; (PSC + 1) &#x2F; (ARR + 1)</strong></p><p>计数器<strong>使用</strong>影子寄存器  和   计数器<strong>不使用</strong>影子寄存器</p><img src="https://s2.loli.net/2022/11/29/2K5PUXlOYSMD8QT.png" alt="image-20221126192339034" style="zoom: 67%;" /><h3 id="2-1-4主模式触发DAC功能"><a href="#2-1-4主模式触发DAC功能" class="headerlink" title="2.1.4主模式触发DAC功能"></a>2.1.4主模式触发DAC功能</h3><p>​当我们使用DAC时，需要每隔一段时间都要输出一段波形，按正常思路来说，我们要使用中断，每隔一段时间调用一次中断里面的代码，实现DAC转换。但是频繁调用中断会影响到主程序的进行，阻碍其他中断的进行</p><p>​如果我们使用主模式的话，就可以把定时器的<strong>更新事件</strong>映射到触发输出TRGO，然后将TRGO接到DAC触发转换引脚上，这样就不需要<strong>更新中断</strong>来实现DAC转换了。整个过程不需要软件的参与，实现了硬件的自动化</p><img src="https://s2.loli.net/2022/11/29/OYA7MyN8UnKJVRb.png" alt="image-20221126153543448" style="zoom: 50%;" /><h2 id="2-2通用定时器"><a href="#2-2通用定时器" class="headerlink" title="2.2通用定时器"></a>2.2通用定时器</h2><p>通用TIMx (TIM2、TIM3、TIM4和TIM5)定时器功能包括： </p><ul><li><p>16位向上、向下、向上&#x2F;向下自动装载计数器 </p></li><li><p>16位可编程(可以实时修改)预分频器，计数器时钟频率的分频系数为1～65536之间的任意数值 </p></li><li><p>4个独立通道： ─ 输入捕获 ─ 输出比较 ─ PWM生成(边缘或中间对齐模式) ─ 单脉冲模式输出 </p></li><li><p>使用外部信号控制定时器和定时器互连的同步电路 </p></li><li><p>如下事件发生时产生中断&#x2F;DMA：</p><ul><li>─ 更新：计数器向上溢出&#x2F;向下溢出，计数器初始化(通过软件或者内部&#x2F;外部触发) </li><li>─ 触发事件(计数器启动、停止、初始化或者由内部&#x2F;外部触发计数)</li><li>─ 输入捕获 </li><li>─ 输出比较</li></ul></li><li><p>支持针对定位的增量(正交)编码器和霍尔传感器电路 </p></li><li><p>触发输入作为外部时钟或者按周期的电流管理</p></li></ul><img src="https://s2.loli.net/2022/11/29/7DrZAa2GSdv9xOe.png" alt="image-20221126180204480" style="zoom:67%;" /><img src="https://s2.loli.net/2022/11/29/DU1tOzaoAjc6s5w.png" alt="image-20221126180323300" style="zoom: 67%;" /><h3 id="2-2-1计数模式"><a href="#2-2-1计数模式" class="headerlink" title="2.2.1计数模式"></a>2.2.1计数模式</h3><p>向上计数模式、向下计数模式、中央对齐模式(向上&#x2F;向下计数)</p><img src="https://s2.loli.net/2022/11/29/DPd8LoY5XCcarvj.png" alt="image-20221126181637041" style="zoom:67%;" /><p>向上计数模式：每次+1，加到目标值，申请中断，归零</p><p>向下计数模式：每次-1，减到目标值，申请中断，归起始值</p><p>中央对齐模式(向上&#x2F;向下计数)：每次+1，加到目标值，申请中断；之后每次-1，减到起始值，申请中断</p><h2 id="2-3高级定时器"><a href="#2-3高级定时器" class="headerlink" title="2.3高级定时器"></a>2.3高级定时器</h2><img src="https://s2.loli.net/2022/11/29/KaRTzxnmFNyL1DQ.png" alt="image-20221126182703940" style="zoom:67%;" /><h1 id="三、定时中断基本结构"><a href="#三、定时中断基本结构" class="headerlink" title="三、定时中断基本结构"></a>三、定时中断基本结构</h1><img src="https://s2.loli.net/2022/11/29/7D3u2HbwmkqO5nJ.png" alt="image-20221126183112649" style="zoom:67%;" /><p>使用中断输出控制的原因：</p><p>定时器模块中很多地方都要申请中断，定时器图中的<strong>向上折的箭头</strong>都表示要申请中断，所以需要控制这些中断，如果需要就允许，不需要就不允许</p><h3 id="时钟树"><a href="#时钟树" class="headerlink" title="时钟树"></a>时钟树</h3><img src="https://s2.loli.net/2022/11/29/kdCRqbZ3MQrpLGz.png" alt="image-20221126193508331" style="zoom: 67%;" /><p>如果不改变SystemInit里面的配置，三种定时器中内部基准时钟均为72MHZ</p><h1 id="实例一、定时中断和内外部时钟代码实现"><a href="#实例一、定时中断和内外部时钟代码实现" class="headerlink" title="实例一、定时中断和内外部时钟代码实现"></a>实例一、定时中断和内外部时钟代码实现</h1><h2 id="1-1、定时中断"><a href="#1-1、定时中断" class="headerlink" title="1.1、定时中断"></a>1.1、定时中断</h2><p><strong>功能实现：</strong>每隔1S计数一次</p><p><strong>注意：</strong>需要手动清除中断初始化时产生的中断标记，不然默认其实值为1，而不是0</p><p>timer.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer_Init</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"><span class="comment">//开启时钟，TIM2是APB1的时钟外设</span></span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//选择时基单元的时钟，可以不选，默认上电后选择内部时钟</span></span><br><span class="line">TIM_InternalClockConfig(TIM2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置时基单元</span></span><br><span class="line">TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;</span><br><span class="line">TIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;<span class="comment">//指定时钟分频</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;<span class="comment">//计数器模式</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Period = <span class="number">10000</span> - <span class="number">1</span>;<span class="comment">//ARR自动重装器的值</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Prescaler = <span class="number">7200</span> - <span class="number">1</span>;<span class="comment">//PSC预分频器的值</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_RepetitionCounter = <span class="number">0</span>;<span class="comment">//重复计数器的值，高级定时器使用</span></span><br><span class="line"></span><br><span class="line">TIM_TimeBaseInit(TIM2,&amp;TIM_TimeBaseInitStructure);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//手动清除中断标志位，避免刚初始化完就进入中断</span></span><br><span class="line">TIM_ClearFlag(TIM2,TIM_IT_Update);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使能中断</span></span><br><span class="line">TIM_ITConfig(TIM2,TIM_IT_Update,ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置NVIC</span></span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);</span><br><span class="line">NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">2</span>;</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">1</span>;</span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动定时器</span></span><br><span class="line">TIM_Cmd(TIM2,ENABLE);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//void TIM2_IRQHandler(void)&#123;</span></span><br><span class="line"><span class="comment">////判断中断</span></span><br><span class="line"><span class="comment">//if(TIM_GetITStatus(TIM2,TIM_IT_Update) == SET)&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////清除中断标志位</span></span><br><span class="line"><span class="comment">//TIM_ClearITPendingBit(TIM2,TIM_IT_Update);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>timer.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __TIMER_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __TIMER_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;OLED.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Timer.h&quot;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">OLED_Init();</span><br><span class="line">Timer_Init();</span><br><span class="line">OLED_ShowString(<span class="number">1</span>,<span class="number">1</span>,<span class="string">&quot;Num:&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123; </span><br><span class="line">OLED_ShowNum(<span class="number">1</span>,<span class="number">5</span>,num,<span class="number">5</span>);</span><br><span class="line"><span class="comment">//OLED_ShowNum(2,1,TIM_GetCounter(TIM2),5);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TIM2_IRQHandler</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"><span class="comment">//判断中断</span></span><br><span class="line"><span class="keyword">if</span>(TIM_GetITStatus(TIM2,TIM_IT_Update) == SET)&#123;</span><br><span class="line">num++;</span><br><span class="line"><span class="comment">//清除中断标志位</span></span><br><span class="line">TIM_ClearITPendingBit(TIM2,TIM_IT_Update);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><hr><p>OLED.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;OLED_Font.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*引脚配置*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_W_SCL(x)GPIO_WriteBit(GPIOB, GPIO_Pin_8, (BitAction)(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_W_SDA(x)GPIO_WriteBit(GPIOB, GPIO_Pin_9, (BitAction)(x))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*引脚初始化*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_I2C_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line"></span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line"> GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;</span><br><span class="line"> GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;</span><br><span class="line"> GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">OLED_W_SCL(<span class="number">1</span>);</span><br><span class="line">OLED_W_SDA(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  I2C开始</span></span><br><span class="line"><span class="comment">  * @param  无</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_I2C_Start</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">OLED_W_SDA(<span class="number">1</span>);</span><br><span class="line">OLED_W_SCL(<span class="number">1</span>);</span><br><span class="line">OLED_W_SDA(<span class="number">0</span>);</span><br><span class="line">OLED_W_SCL(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  I2C停止</span></span><br><span class="line"><span class="comment">  * @param  无</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_I2C_Stop</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">OLED_W_SDA(<span class="number">0</span>);</span><br><span class="line">OLED_W_SCL(<span class="number">1</span>);</span><br><span class="line">OLED_W_SDA(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  I2C发送一个字节</span></span><br><span class="line"><span class="comment">  * @param  Byte 要发送的一个字节</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_I2C_SendByte</span><span class="params">(<span class="type">uint8_t</span> Byte)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">OLED_W_SDA(Byte &amp; (<span class="number">0x80</span> &gt;&gt; i));</span><br><span class="line">OLED_W_SCL(<span class="number">1</span>);</span><br><span class="line">OLED_W_SCL(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">OLED_W_SCL(<span class="number">1</span>);<span class="comment">//额外的一个时钟，不处理应答信号</span></span><br><span class="line">OLED_W_SCL(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  OLED写命令</span></span><br><span class="line"><span class="comment">  * @param  Command 要写入的命令</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_WriteCommand</span><span class="params">(<span class="type">uint8_t</span> Command)</span></span><br><span class="line">&#123;</span><br><span class="line">OLED_I2C_Start();</span><br><span class="line">OLED_I2C_SendByte(<span class="number">0x78</span>);<span class="comment">//从机地址</span></span><br><span class="line">OLED_I2C_SendByte(<span class="number">0x00</span>);<span class="comment">//写命令</span></span><br><span class="line">OLED_I2C_SendByte(Command); </span><br><span class="line">OLED_I2C_Stop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  OLED写数据</span></span><br><span class="line"><span class="comment">  * @param  Data 要写入的数据</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_WriteData</span><span class="params">(<span class="type">uint8_t</span> Data)</span></span><br><span class="line">&#123;</span><br><span class="line">OLED_I2C_Start();</span><br><span class="line">OLED_I2C_SendByte(<span class="number">0x78</span>);<span class="comment">//从机地址</span></span><br><span class="line">OLED_I2C_SendByte(<span class="number">0x40</span>);<span class="comment">//写数据</span></span><br><span class="line">OLED_I2C_SendByte(Data);</span><br><span class="line">OLED_I2C_Stop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  OLED设置光标位置</span></span><br><span class="line"><span class="comment">  * @param  Y 以左上角为原点，向下方向的坐标，范围：0~7</span></span><br><span class="line"><span class="comment">  * @param  X 以左上角为原点，向右方向的坐标，范围：0~127</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_SetCursor</span><span class="params">(<span class="type">uint8_t</span> Y, <span class="type">uint8_t</span> X)</span></span><br><span class="line">&#123;</span><br><span class="line">OLED_WriteCommand(<span class="number">0xB0</span> | Y);<span class="comment">//设置Y位置</span></span><br><span class="line">OLED_WriteCommand(<span class="number">0x10</span> | ((X &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>));<span class="comment">//设置X位置高4位</span></span><br><span class="line">OLED_WriteCommand(<span class="number">0x00</span> | (X &amp; <span class="number">0x0F</span>));<span class="comment">//设置X位置低4位</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  OLED清屏</span></span><br><span class="line"><span class="comment">  * @param  无</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_Clear</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;  </span><br><span class="line"><span class="type">uint8_t</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">OLED_SetCursor(j, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">128</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">OLED_WriteData(<span class="number">0x00</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  OLED显示一个字符</span></span><br><span class="line"><span class="comment">  * @param  Line 行位置，范围：1~4</span></span><br><span class="line"><span class="comment">  * @param  Column 列位置，范围：1~16</span></span><br><span class="line"><span class="comment">  * @param  Char 要显示的一个字符，范围：ASCII可见字符</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_ShowChar</span><span class="params">(<span class="type">uint8_t</span> Line, <span class="type">uint8_t</span> Column, <span class="type">char</span> Char)</span></span><br><span class="line">&#123;      </span><br><span class="line"><span class="type">uint8_t</span> i;</span><br><span class="line">OLED_SetCursor((Line - <span class="number">1</span>) * <span class="number">2</span>, (Column - <span class="number">1</span>) * <span class="number">8</span>);<span class="comment">//设置光标位置在上半部分</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">OLED_WriteData(OLED_F8x16[Char - <span class="string">&#x27; &#x27;</span>][i]);<span class="comment">//显示上半部分内容</span></span><br><span class="line">&#125;</span><br><span class="line">OLED_SetCursor((Line - <span class="number">1</span>) * <span class="number">2</span> + <span class="number">1</span>, (Column - <span class="number">1</span>) * <span class="number">8</span>);<span class="comment">//设置光标位置在下半部分</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">OLED_WriteData(OLED_F8x16[Char - <span class="string">&#x27; &#x27;</span>][i + <span class="number">8</span>]);<span class="comment">//显示下半部分内容</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  OLED显示字符串</span></span><br><span class="line"><span class="comment">  * @param  Line 起始行位置，范围：1~4</span></span><br><span class="line"><span class="comment">  * @param  Column 起始列位置，范围：1~16</span></span><br><span class="line"><span class="comment">  * @param  String 要显示的字符串，范围：ASCII可见字符</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_ShowString</span><span class="params">(<span class="type">uint8_t</span> Line, <span class="type">uint8_t</span> Column, <span class="type">char</span> *String)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; String[i] != <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">OLED_ShowChar(Line, Column + i, String[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  OLED次方函数</span></span><br><span class="line"><span class="comment">  * @retval 返回值等于X的Y次方</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">OLED_Pow</span><span class="params">(<span class="type">uint32_t</span> X, <span class="type">uint32_t</span> Y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> Result = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (Y--)</span><br><span class="line">&#123;</span><br><span class="line">Result *= X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  OLED显示数字（十进制，正数）</span></span><br><span class="line"><span class="comment">  * @param  Line 起始行位置，范围：1~4</span></span><br><span class="line"><span class="comment">  * @param  Column 起始列位置，范围：1~16</span></span><br><span class="line"><span class="comment">  * @param  Number 要显示的数字，范围：0~4294967295</span></span><br><span class="line"><span class="comment">  * @param  Length 要显示数字的长度，范围：1~10</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_ShowNum</span><span class="params">(<span class="type">uint8_t</span> Line, <span class="type">uint8_t</span> Column, <span class="type">uint32_t</span> Number, <span class="type">uint8_t</span> Length)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; Length; i++)</span><br><span class="line">&#123;</span><br><span class="line">OLED_ShowChar(Line, Column + i, Number / OLED_Pow(<span class="number">10</span>, Length - i - <span class="number">1</span>) % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  OLED显示数字（十进制，带符号数）</span></span><br><span class="line"><span class="comment">  * @param  Line 起始行位置，范围：1~4</span></span><br><span class="line"><span class="comment">  * @param  Column 起始列位置，范围：1~16</span></span><br><span class="line"><span class="comment">  * @param  Number 要显示的数字，范围：-2147483648~2147483647</span></span><br><span class="line"><span class="comment">  * @param  Length 要显示数字的长度，范围：1~10</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_ShowSignedNum</span><span class="params">(<span class="type">uint8_t</span> Line, <span class="type">uint8_t</span> Column, <span class="type">int32_t</span> Number, <span class="type">uint8_t</span> Length)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> i;</span><br><span class="line"><span class="type">uint32_t</span> Number1;</span><br><span class="line"><span class="keyword">if</span> (Number &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">OLED_ShowChar(Line, Column, <span class="string">&#x27;+&#x27;</span>);</span><br><span class="line">Number1 = Number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">OLED_ShowChar(Line, Column, <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">Number1 = -Number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; Length; i++)</span><br><span class="line">&#123;</span><br><span class="line">OLED_ShowChar(Line, Column + i + <span class="number">1</span>, Number1 / OLED_Pow(<span class="number">10</span>, Length - i - <span class="number">1</span>) % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  OLED显示数字（十六进制，正数）</span></span><br><span class="line"><span class="comment">  * @param  Line 起始行位置，范围：1~4</span></span><br><span class="line"><span class="comment">  * @param  Column 起始列位置，范围：1~16</span></span><br><span class="line"><span class="comment">  * @param  Number 要显示的数字，范围：0~0xFFFFFFFF</span></span><br><span class="line"><span class="comment">  * @param  Length 要显示数字的长度，范围：1~8</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_ShowHexNum</span><span class="params">(<span class="type">uint8_t</span> Line, <span class="type">uint8_t</span> Column, <span class="type">uint32_t</span> Number, <span class="type">uint8_t</span> Length)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> i, SingleNumber;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; Length; i++)</span><br><span class="line">&#123;</span><br><span class="line">SingleNumber = Number / OLED_Pow(<span class="number">16</span>, Length - i - <span class="number">1</span>) % <span class="number">16</span>;</span><br><span class="line"><span class="keyword">if</span> (SingleNumber &lt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">OLED_ShowChar(Line, Column + i, SingleNumber + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">OLED_ShowChar(Line, Column + i, SingleNumber - <span class="number">10</span> + <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  OLED显示数字（二进制，正数）</span></span><br><span class="line"><span class="comment">  * @param  Line 起始行位置，范围：1~4</span></span><br><span class="line"><span class="comment">  * @param  Column 起始列位置，范围：1~16</span></span><br><span class="line"><span class="comment">  * @param  Number 要显示的数字，范围：0~1111 1111 1111 1111</span></span><br><span class="line"><span class="comment">  * @param  Length 要显示数字的长度，范围：1~16</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_ShowBinNum</span><span class="params">(<span class="type">uint8_t</span> Line, <span class="type">uint8_t</span> Column, <span class="type">uint32_t</span> Number, <span class="type">uint8_t</span> Length)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; Length; i++)</span><br><span class="line">&#123;</span><br><span class="line">OLED_ShowChar(Line, Column + i, Number / OLED_Pow(<span class="number">2</span>, Length - i - <span class="number">1</span>) % <span class="number">2</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  OLED初始化</span></span><br><span class="line"><span class="comment">  * @param  无</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> i, j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)<span class="comment">//上电延时</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">OLED_I2C_Init();<span class="comment">//端口初始化</span></span><br><span class="line"></span><br><span class="line">OLED_WriteCommand(<span class="number">0xAE</span>);<span class="comment">//关闭显示</span></span><br><span class="line"></span><br><span class="line">OLED_WriteCommand(<span class="number">0xD5</span>);<span class="comment">//设置显示时钟分频比/振荡器频率</span></span><br><span class="line">OLED_WriteCommand(<span class="number">0x80</span>);</span><br><span class="line"></span><br><span class="line">OLED_WriteCommand(<span class="number">0xA8</span>);<span class="comment">//设置多路复用率</span></span><br><span class="line">OLED_WriteCommand(<span class="number">0x3F</span>);</span><br><span class="line"></span><br><span class="line">OLED_WriteCommand(<span class="number">0xD3</span>);<span class="comment">//设置显示偏移</span></span><br><span class="line">OLED_WriteCommand(<span class="number">0x00</span>);</span><br><span class="line"></span><br><span class="line">OLED_WriteCommand(<span class="number">0x40</span>);<span class="comment">//设置显示开始行</span></span><br><span class="line"></span><br><span class="line">OLED_WriteCommand(<span class="number">0xA1</span>);<span class="comment">//设置左右方向，0xA1正常 0xA0左右反置</span></span><br><span class="line"></span><br><span class="line">OLED_WriteCommand(<span class="number">0xC8</span>);<span class="comment">//设置上下方向，0xC8正常 0xC0上下反置</span></span><br><span class="line"></span><br><span class="line">OLED_WriteCommand(<span class="number">0xDA</span>);<span class="comment">//设置COM引脚硬件配置</span></span><br><span class="line">OLED_WriteCommand(<span class="number">0x12</span>);</span><br><span class="line"></span><br><span class="line">OLED_WriteCommand(<span class="number">0x81</span>);<span class="comment">//设置对比度控制</span></span><br><span class="line">OLED_WriteCommand(<span class="number">0xCF</span>);</span><br><span class="line"></span><br><span class="line">OLED_WriteCommand(<span class="number">0xD9</span>);<span class="comment">//设置预充电周期</span></span><br><span class="line">OLED_WriteCommand(<span class="number">0xF1</span>);</span><br><span class="line"></span><br><span class="line">OLED_WriteCommand(<span class="number">0xDB</span>);<span class="comment">//设置VCOMH取消选择级别</span></span><br><span class="line">OLED_WriteCommand(<span class="number">0x30</span>);</span><br><span class="line"></span><br><span class="line">OLED_WriteCommand(<span class="number">0xA4</span>);<span class="comment">//设置整个显示打开/关闭</span></span><br><span class="line"></span><br><span class="line">OLED_WriteCommand(<span class="number">0xA6</span>);<span class="comment">//设置正常/倒转显示</span></span><br><span class="line"></span><br><span class="line">OLED_WriteCommand(<span class="number">0x8D</span>);<span class="comment">//设置充电泵</span></span><br><span class="line">OLED_WriteCommand(<span class="number">0x14</span>);</span><br><span class="line"></span><br><span class="line">OLED_WriteCommand(<span class="number">0xAF</span>);<span class="comment">//开启显示</span></span><br><span class="line"></span><br><span class="line">OLED_Clear();<span class="comment">//OLED清屏</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>OLED.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __OLED_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __OLED_H</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_Clear</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_ShowChar</span><span class="params">(<span class="type">uint8_t</span> Line, <span class="type">uint8_t</span> Column, <span class="type">char</span> Char)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_ShowString</span><span class="params">(<span class="type">uint8_t</span> Line, <span class="type">uint8_t</span> Column, <span class="type">char</span> *String)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_ShowNum</span><span class="params">(<span class="type">uint8_t</span> Line, <span class="type">uint8_t</span> Column, <span class="type">uint32_t</span> Number, <span class="type">uint8_t</span> Length)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_ShowSignedNum</span><span class="params">(<span class="type">uint8_t</span> Line, <span class="type">uint8_t</span> Column, <span class="type">int32_t</span> Number, <span class="type">uint8_t</span> Length)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_ShowHexNum</span><span class="params">(<span class="type">uint8_t</span> Line, <span class="type">uint8_t</span> Column, <span class="type">uint32_t</span> Number, <span class="type">uint8_t</span> Length)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_ShowBinNum</span><span class="params">(<span class="type">uint8_t</span> Line, <span class="type">uint8_t</span> Column, <span class="type">uint32_t</span> Number, <span class="type">uint8_t</span> Length)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-2、外部时钟"><a href="#1-2、外部时钟" class="headerlink" title="1.2、外部时钟"></a>1.2、外部时钟</h2><p><strong>功能实现：</strong>每遮挡一次计数器+1</p><p><strong>注意：</strong>如果出现遮挡一次跳跃好多次，需要添加滤波</p><p>timer.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer_Init</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"><span class="comment">//开启时钟，TIM2是APB1的时钟外设</span></span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//配置GPIO</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);</span><br><span class="line">    </span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;</span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;</span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择外部时钟</span></span><br><span class="line">TIM_ETRClockMode2Config(TIM2,TIM_ExtTRGPSC_OFF,TIM_ExtTRGPolarity_NonInverted,<span class="number">0x0f</span>);<span class="comment">//这里要添加滤波，不然会跳好多次</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置时基单元</span></span><br><span class="line">TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;</span><br><span class="line">TIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;<span class="comment">//指定时钟分频</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;<span class="comment">//计数器模式</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Period = <span class="number">10</span> - <span class="number">1</span>;<span class="comment">//ARR自动重装器的值</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Prescaler = <span class="number">1</span> - <span class="number">1</span>;<span class="comment">//PSC预分频器的值</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_RepetitionCounter = <span class="number">0</span>;<span class="comment">//重复计数器的值，高级定时器使用</span></span><br><span class="line"></span><br><span class="line">TIM_TimeBaseInit(TIM2,&amp;TIM_TimeBaseInitStructure);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//手动清除中断标志位，避免刚初始化完就进入中断</span></span><br><span class="line">TIM_ClearFlag(TIM2,TIM_IT_Update);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使能中断</span></span><br><span class="line">TIM_ITConfig(TIM2,TIM_IT_Update,ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置NVIC</span></span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);</span><br><span class="line">NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">2</span>;</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">1</span>;</span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动定时器</span></span><br><span class="line">TIM_Cmd(TIM2,ENABLE);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">Timer_GetCount</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> TIM_GetCounter(TIM2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//void TIM2_IRQHandler(void)&#123;</span></span><br><span class="line"><span class="comment">////判断中断</span></span><br><span class="line"><span class="comment">//if(TIM_GetITStatus(TIM2,TIM_IT_Update) == SET)&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////清除中断标志位</span></span><br><span class="line"><span class="comment">//TIM_ClearITPendingBit(TIM2,TIM_IT_Update);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>timer.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __TIMER_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __TIMER_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">Timer_GetCount</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;OLED.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Timer.h&quot;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">OLED_Init();</span><br><span class="line">Timer_Init();</span><br><span class="line">OLED_ShowString(<span class="number">1</span>,<span class="number">1</span>,<span class="string">&quot;Num:&quot;</span>);</span><br><span class="line">OLED_ShowString(<span class="number">2</span>,<span class="number">1</span>,<span class="string">&quot;CNT:&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123; </span><br><span class="line">OLED_ShowNum(<span class="number">1</span>,<span class="number">5</span>,num,<span class="number">5</span>);</span><br><span class="line">OLED_ShowNum(<span class="number">2</span>,<span class="number">5</span>,Timer_GetCount(),<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TIM2_IRQHandler</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"><span class="comment">//判断中断</span></span><br><span class="line"><span class="keyword">if</span>(TIM_GetITStatus(TIM2,TIM_IT_Update) == SET)&#123;</span><br><span class="line">num++;</span><br><span class="line"><span class="comment">//清除中断标志位</span></span><br><span class="line">TIM_ClearITPendingBit(TIM2,TIM_IT_Update);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="四、TIM输出比较"><a href="#四、TIM输出比较" class="headerlink" title="四、TIM输出比较"></a>四、TIM输出比较</h1><p>OC（Output Compare）输出比较</p><p>输出比较可以通过比较CNT与CCR寄存器值的关系，来对输出电平进行置1、置0或翻转的操作，用于输出一定频率和占空比的PWM波形</p><blockquote><p>CCR是输出比较寄存器</p><img src="https://s2.loli.net/2022/11/29/TVSgQeYa23qJA6u.png" alt="image-20221128195422185" style="zoom: 67%;" /></blockquote><p>每个高级定时器和通用定时器都拥有4个输出比较通道</p><p>高级定时器的前3个通道额外拥有死区生成和互补输出的功能</p><h2 id="4-1、PWM简介"><a href="#4-1、PWM简介" class="headerlink" title="4.1、PWM简介"></a>4.1、PWM简介</h2><p>PWM（Pulse Width Modulation）脉冲宽度调制</p><p>在具有惯性的系统中，可以通过对一系列脉冲的宽度进行调制，来等效地获得所需要的模拟参量，常应用于电机控速等领域</p><p>PWM参数：<strong>频率</strong> &#x3D; 1 &#x2F; TS      **占空比 **&#x3D; TON &#x2F; TS      <strong>分辨率</strong> &#x3D; 占空比变化步距</p><blockquote><p>占空比越大，模拟出的电压越趋近于高电平，占空比越小，模拟出的电压越趋近于低电平</p></blockquote><p><img src="https://s2.loli.net/2022/11/29/gWckmYJwxGRTQuM.png" alt="image-20221128195700005"></p><h2 id="4-2、输出比较通道"><a href="#4-2、输出比较通道" class="headerlink" title="4.2、输出比较通道"></a>4.2、输出比较通道</h2><h3 id="4-2-1输出比较通道-通用定时器"><a href="#4-2-1输出比较通道-通用定时器" class="headerlink" title="4.2.1输出比较通道(通用定时器)"></a>4.2.1输出比较通道(通用定时器)</h3><img src="https://s2.loli.net/2022/11/29/O1VE3Xpk2FJuNmA.png" alt="image-20221128201040691" style="zoom: 67%;" /><h3 id="4-2-2输出比较通道-高级定时器"><a href="#4-2-2输出比较通道-高级定时器" class="headerlink" title="4.2.2输出比较通道(高级定时器)"></a>4.2.2输出比较通道(高级定时器)</h3><img src="https://s2.loli.net/2022/11/29/wuxyh1sdYmSfDL8.png" alt="image-20221129103943044" style="zoom:67%;" /><h2 id="4-3-输出比较模式"><a href="#4-3-输出比较模式" class="headerlink" title="4.3 输出比较模式"></a>4.3 输出比较模式</h2><p><img src="https://s2.loli.net/2022/11/29/LQb7hR4EaISBAVk.png" alt="image-20221128203052660"></p><h2 id="4-4PWM基本结构"><a href="#4-4PWM基本结构" class="headerlink" title="4.4PWM基本结构"></a>4.4PWM基本结构</h2><img src="https://s2.loli.net/2022/11/29/6P2Bl5JXREKVMIs.png" alt="image-20221128203914556" style="zoom:67%;" /><p>PWM频率： Freq &#x3D; { CK_PSC &#x2F; (PSC + 1) }  &#x2F;  (ARR + 1)</p><blockquote><p>PWM的频率&#x3D;计数器更新频率</p></blockquote><p>PWM占空比： Duty &#x3D; CCR &#x2F; (ARR + 1)</p><p>PWM分辨率： Reso &#x3D; 1 &#x2F; (ARR + 1)</p><blockquote><p>分辨率定义为占空比最小的变化步距，占空比变化的越细腻越好</p></blockquote><h1 id="五、舵机"><a href="#五、舵机" class="headerlink" title="五、舵机"></a>五、舵机</h1><p>舵机是一种根据输入PWM信号占空比来控制输出角度的装置</p><p>输入PWM信号要求：周期为20ms，高电平宽度为0.5ms~2.5ms</p><img src="https://s2.loli.net/2022/11/29/XNZ5URiz8J1wLxG.png" alt="image-20221128210052386" style="zoom:67%;" /><p>在这里，PWM当做通讯协议使用，不是PWM等效一个模拟输出</p><img src="https://s2.loli.net/2022/11/29/hnjrV8mFR3bcKf9.png" alt="image-20221128210413737" style="zoom:67%;" /><h1 id="六、直流电机"><a href="#六、直流电机" class="headerlink" title="六、直流电机"></a>六、直流电机</h1><p>直流电机是一种将电能转换为机械能的装置，有两个电极，当电极正接时，电机正转，当电极反接时，电机反转</p><p>直流电机属于<strong>大功率器件</strong>，<strong>GPIO口无法直接驱动</strong>，需要配合电机驱动电路来操作</p><p>TB6612是一款双路H桥型的直流电机驱动芯片，可以驱动两个直流电机并且控制其转速和方向</p><img src="https://s2.loli.net/2022/11/29/hOJVKElbmrjdMf3.png" alt="image-20221128210854526" style="zoom:67%;" /><img src="https://s2.loli.net/2022/11/29/84RfNLopVDwPyXb.png" alt="image-20221128211613707" style="zoom:70%;" /><h1 id="实例二、PWM驱动呼吸灯-amp-舵机-amp-直流电机代码实现"><a href="#实例二、PWM驱动呼吸灯-amp-舵机-amp-直流电机代码实现" class="headerlink" title="实例二、PWM驱动呼吸灯&amp;舵机&amp;直流电机代码实现"></a>实例二、PWM驱动呼吸灯&amp;舵机&amp;直流电机代码实现</h1><h2 id="2-1、PWM驱动LED呼吸灯"><a href="#2-1、PWM驱动LED呼吸灯" class="headerlink" title="2.1、PWM驱动LED呼吸灯"></a>2.1、PWM驱动LED呼吸灯</h2><p><strong>功能实现：</strong>LED实现呼吸效果</p><p><strong>注意：</strong>这里用过改变CCR的值来改变占空，比达到呼吸效果；但是占空比的值是有CCR和ARR+1共同决定的</p><p>PWM.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PWM_Init</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启时钟，TIM2是APB1的时钟外设</span></span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置GPIO</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);</span><br><span class="line"></span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;</span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择时基单元的时钟，可以不选，默认上电后选择内部时钟</span></span><br><span class="line">TIM_InternalClockConfig(TIM2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置时基单元</span></span><br><span class="line">TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;</span><br><span class="line">TIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;<span class="comment">//指定时钟分频</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;<span class="comment">//计数器模式</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Period = <span class="number">100</span> - <span class="number">1</span>;<span class="comment">//ARR自动重装器的值</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Prescaler = <span class="number">720</span> - <span class="number">1</span>;<span class="comment">//PSC预分频器的值</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_RepetitionCounter = <span class="number">0</span>;<span class="comment">//重复计数器的值，高级定时器使用</span></span><br><span class="line"></span><br><span class="line">TIM_TimeBaseInit(TIM2,&amp;TIM_TimeBaseInitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化输出比较单元</span></span><br><span class="line">TIM_OCInitTypeDef TIM_OCInitStructure;</span><br><span class="line"><span class="comment">//不论是否使用，都先赋一个初值，避免出现奇奇怪怪的错误。赋值后再更改需要的参数即可</span></span><br><span class="line">TIM_OCStructInit(&amp;TIM_OCInitStructure);<span class="comment">//结构体赋初始值</span></span><br><span class="line">TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;<span class="comment">//设置输出比较模式</span></span><br><span class="line">TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;<span class="comment">//设置输出比较极性</span></span><br><span class="line">TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;<span class="comment">//设置输出使能</span></span><br><span class="line">TIM_OCInitStructure.TIM_Pulse = <span class="number">0</span>;<span class="comment">//设置CCR</span></span><br><span class="line">TIM_OC1Init(TIM2, &amp;TIM_OCInitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动定时器</span></span><br><span class="line">TIM_Cmd(TIM2,ENABLE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">PWM_SetCompare1</span><span class="params">(<span class="type">uint16_t</span> Compare)</span></span><br><span class="line">&#123;</span><br><span class="line">TIM_SetCompare1(TIM2, Compare);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>PWM.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __PWM_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __PWM_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PWM_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">PWM_SetCompare1</span><span class="params">(<span class="type">uint16_t</span> Compare)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;PWM.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;OLED.h&quot;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> i;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">OLED_Init();</span><br><span class="line">PWM_Init();</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i&lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">PWM_SetCompare1(i);</span><br><span class="line">Delay_ms(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i&lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">PWM_SetCompare1(<span class="number">100</span>-i);</span><br><span class="line">Delay_ms(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><hr><p>Delay.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  微秒级延时</span></span><br><span class="line"><span class="comment">  * @param  xus 延时时长，范围：0~233015</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_us</span><span class="params">(<span class="type">uint32_t</span> xus)</span></span><br><span class="line">&#123;</span><br><span class="line">SysTick-&gt;LOAD = <span class="number">72</span> * xus;<span class="comment">//设置定时器重装值</span></span><br><span class="line">SysTick-&gt;VAL = <span class="number">0x00</span>;<span class="comment">//清空当前计数值</span></span><br><span class="line">SysTick-&gt;CTRL = <span class="number">0x00000005</span>;<span class="comment">//设置时钟源为HCLK，启动定时器</span></span><br><span class="line"><span class="keyword">while</span>(!(SysTick-&gt;CTRL &amp; <span class="number">0x00010000</span>));<span class="comment">//等待计数到0</span></span><br><span class="line">SysTick-&gt;CTRL = <span class="number">0x00000004</span>;<span class="comment">//关闭定时器</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  毫秒级延时</span></span><br><span class="line"><span class="comment">  * @param  xms 延时时长，范围：0~4294967295</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_ms</span><span class="params">(<span class="type">uint32_t</span> xms)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(xms--)</span><br><span class="line">&#123;</span><br><span class="line">Delay_us(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  秒级延时</span></span><br><span class="line"><span class="comment">  * @param  xs 延时时长，范围：0~4294967295</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_s</span><span class="params">(<span class="type">uint32_t</span> xs)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(xs--)</span><br><span class="line">&#123;</span><br><span class="line">Delay_ms(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Delay.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DELAY_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DELAY_H</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_us</span><span class="params">(<span class="type">uint32_t</span> us)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_ms</span><span class="params">(<span class="type">uint32_t</span> ms)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_s</span><span class="params">(<span class="type">uint32_t</span> s)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="拓展：keil5自带示波器使用"><a href="#拓展：keil5自带示波器使用" class="headerlink" title="拓展：keil5自带示波器使用"></a>拓展：keil5自带示波器使用</h2><h3 id="1-点击魔术棒"><a href="#1-点击魔术棒" class="headerlink" title="1.点击魔术棒"></a>1.点击魔术棒</h3><p><img src="https://s2.loli.net/2022/11/29/viyxJ9te8qOM7g4.png" alt="image-20221128235705370"></p><h3 id="2-进入Debug"><a href="#2-进入Debug" class="headerlink" title="2.进入Debug"></a>2.进入Debug</h3><p>先设置为Use Simulator，然后去设置Dialog DLL和其后面的Parameter.</p><p>其中将Dialog DLL设置为：DARMSTM.DLL</p><p>Parameter设置为-p单片机型号</p><img src="https://s2.loli.net/2022/11/29/J7hwnFYvy9reRdk.png" alt="image-20221128235745302" style="zoom: 75%;" /><h3 id="3-进入调试模式，调出示波器"><a href="#3-进入调试模式，调出示波器" class="headerlink" title="3.进入调试模式，调出示波器"></a>3.进入调试模式，调出示波器</h3><p><img src="https://s2.loli.net/2022/11/29/o1bEQYhpl4v6qTA.png" alt="image-20221129000242745"></p><h3 id="4-点击Setup设置仿真端口"><a href="#4-点击Setup设置仿真端口" class="headerlink" title="4.点击Setup设置仿真端口"></a>4.点击Setup设置仿真端口</h3><p> 在里面加入要查看的端口，格式为PORTX.Y【X为A,B,C….;Y为1，2，3，….】</p><p><img src="https://s2.loli.net/2022/11/29/JY4VaLPX3w6oWiU.png" alt="image-20221129000321043"></p><img src="https://s2.loli.net/2022/11/29/SWRhgBnNp9k5GAe.png" alt="image-20221129000506238" style="zoom:60%;" /><img src="https://s2.loli.net/2022/11/29/qE7mSpNaxvHFA9y.png" alt="image-20221129000615129" style="zoom:70%;" /><h3 id="5-查看仿真效果"><a href="#5-查看仿真效果" class="headerlink" title="5.查看仿真效果"></a>5.查看仿真效果</h3><img src="https://s2.loli.net/2022/11/29/fIkGxOhPtBDpV4M.png" alt="image-20221129000647017" style="zoom:55%;" /><h2 id="2-2、PWM驱动舵机"><a href="#2-2、PWM驱动舵机" class="headerlink" title="2.2、PWM驱动舵机"></a>2.2、PWM驱动舵机</h2><p><strong>功能实现：</strong>通过按键控制舵机旋转角度</p><p>PWM.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PWM_Init</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启时钟，TIM2是APB1的时钟外设</span></span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置GPIO</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);</span><br><span class="line"></span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;</span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择时基单元的时钟，可以不选，默认上电后选择内部时钟</span></span><br><span class="line">TIM_InternalClockConfig(TIM2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置时基单元</span></span><br><span class="line">TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;</span><br><span class="line">TIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;<span class="comment">//指定时钟分频</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;<span class="comment">//计数器模式</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Period = <span class="number">20000</span> - <span class="number">1</span>;<span class="comment">//ARR自动重装器的值</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Prescaler = <span class="number">72</span> - <span class="number">1</span>;<span class="comment">//PSC预分频器的值</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_RepetitionCounter = <span class="number">0</span>;<span class="comment">//重复计数器的值，高级定时器使用</span></span><br><span class="line"></span><br><span class="line">TIM_TimeBaseInit(TIM2,&amp;TIM_TimeBaseInitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化输出比较单元</span></span><br><span class="line">TIM_OCInitTypeDef TIM_OCInitStructure;</span><br><span class="line"><span class="comment">//不论是否使用，都先赋一个初值，避免出现奇奇怪怪的错误。赋值后再更改需要的参数即可</span></span><br><span class="line">TIM_OCStructInit(&amp;TIM_OCInitStructure);<span class="comment">//结构体赋初始值</span></span><br><span class="line">TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;<span class="comment">//设置输出比较模式</span></span><br><span class="line">TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;<span class="comment">//设置输出比较极性</span></span><br><span class="line">TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;<span class="comment">//设置输出使能</span></span><br><span class="line">TIM_OCInitStructure.TIM_Pulse = <span class="number">0</span>;<span class="comment">//设置CCR</span></span><br><span class="line">TIM_OC2Init(TIM2, &amp;TIM_OCInitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动定时器</span></span><br><span class="line">TIM_Cmd(TIM2,ENABLE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">PWM_SetCompare2</span><span class="params">(<span class="type">uint16_t</span> Compare)</span></span><br><span class="line">&#123;</span><br><span class="line">TIM_SetCompare2(TIM2, Compare);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>PWM.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __PWM_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __PWM_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PWM_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">PWM_SetCompare2</span><span class="params">(<span class="type">uint16_t</span> Compare)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Servo.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;PWM.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Servo_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">PWM_Init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Servo_SetAngle</span><span class="params">(<span class="type">float</span> Angle)</span></span><br><span class="line">&#123;</span><br><span class="line">PWM_SetCompare2(Angle / <span class="number">180</span> * <span class="number">2000</span> + <span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Servo.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __SERVO_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __SERVO_H</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Servo_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Servo_SetAngle</span><span class="params">(<span class="type">float</span> Angle)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Servo.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;OLED.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Key.h&quot;</span> </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> KeyNum;</span><br><span class="line"><span class="type">float</span> Angle;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">OLED_Init();</span><br><span class="line">Servo_Init();</span><br><span class="line">Key_Init();</span><br><span class="line"></span><br><span class="line">OLED_ShowString(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;Angle:&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">KeyNum = Key_GetNum();</span><br><span class="line"><span class="keyword">if</span> (KeyNum == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">Angle += <span class="number">30</span>;</span><br><span class="line"><span class="keyword">if</span> (Angle &gt; <span class="number">180</span>)</span><br><span class="line">&#123;</span><br><span class="line">Angle = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Servo_SetAngle(<span class="number">180</span>);</span><br><span class="line">OLED_ShowNum(<span class="number">1</span>, <span class="number">7</span>, Angle, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Delay.c</p><p>Delay.h</p><h2 id="2-3、PWM驱动直流电机"><a href="#2-3、PWM驱动直流电机" class="headerlink" title="2.3、PWM驱动直流电机"></a>2.3、PWM驱动直流电机</h2><p><strong>功能实现：</strong>通过按键控制舵机旋转速度</p><p>PWM.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PWM_Init</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启时钟，TIM2是APB1的时钟外设</span></span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置GPIO</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);</span><br><span class="line"></span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;</span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择时基单元的时钟，可以不选，默认上电后选择内部时钟</span></span><br><span class="line">TIM_InternalClockConfig(TIM2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置时基单元</span></span><br><span class="line">TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;</span><br><span class="line">TIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;<span class="comment">//指定时钟分频</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;<span class="comment">//计数器模式</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Period = <span class="number">100</span> - <span class="number">1</span>;<span class="comment">//ARR自动重装器的值</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Prescaler = <span class="number">720</span> - <span class="number">1</span>;<span class="comment">//PSC预分频器的值</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_RepetitionCounter = <span class="number">0</span>;<span class="comment">//重复计数器的值，高级定时器使用</span></span><br><span class="line"></span><br><span class="line">TIM_TimeBaseInit(TIM2,&amp;TIM_TimeBaseInitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化输出比较单元</span></span><br><span class="line">TIM_OCInitTypeDef TIM_OCInitStructure;</span><br><span class="line"><span class="comment">//不论是否使用，都先赋一个初值，避免出现奇奇怪怪的错误。赋值后再更改需要的参数即可</span></span><br><span class="line">TIM_OCStructInit(&amp;TIM_OCInitStructure);<span class="comment">//结构体赋初始值</span></span><br><span class="line">TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;<span class="comment">//设置输出比较模式</span></span><br><span class="line">TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;<span class="comment">//设置输出比较极性</span></span><br><span class="line">TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;<span class="comment">//设置输出使能</span></span><br><span class="line">TIM_OCInitStructure.TIM_Pulse = <span class="number">0</span>;<span class="comment">//设置CCR</span></span><br><span class="line">TIM_OC3Init(TIM2, &amp;TIM_OCInitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动定时器</span></span><br><span class="line">TIM_Cmd(TIM2,ENABLE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">PWM_SetCompare3</span><span class="params">(<span class="type">uint16_t</span> Compare)</span></span><br><span class="line">&#123;</span><br><span class="line">TIM_SetCompare3(TIM2, Compare);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>PWM.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __PWM_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __PWM_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PWM_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">PWM_SetCompare3</span><span class="params">(<span class="type">uint16_t</span> Compare)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Motor.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;PWM.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Motor_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line"></span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">PWM_Init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Motor_SetSpeed</span><span class="params">(<span class="type">int8_t</span> Speed)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Speed &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">GPIO_SetBits(GPIOA, GPIO_Pin_4);</span><br><span class="line">GPIO_ResetBits(GPIOA, GPIO_Pin_5);</span><br><span class="line"><span class="comment">//设置速度</span></span><br><span class="line">PWM_SetCompare3(Speed);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">GPIO_ResetBits(GPIOA, GPIO_Pin_4);</span><br><span class="line">GPIO_SetBits(GPIOA, GPIO_Pin_5);</span><br><span class="line"><span class="comment">//设置速度</span></span><br><span class="line">PWM_SetCompare3(-Speed);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Motor.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __MOTOR_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __MOTOR_H</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Motor_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Motor_SetSpeed</span><span class="params">(<span class="type">int8_t</span> Speed)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Motor.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;OLED.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Key.h&quot;</span> </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> KeyNum;</span><br><span class="line"><span class="type">int8_t</span> Speed;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">OLED_Init();</span><br><span class="line">Motor_Init();</span><br><span class="line">Key_Init();</span><br><span class="line"></span><br><span class="line">OLED_ShowString(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;Speed:&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">KeyNum = Key_GetNum();</span><br><span class="line"><span class="keyword">if</span> (KeyNum == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">Speed += <span class="number">20</span>;</span><br><span class="line"><span class="keyword">if</span> (Speed &gt; <span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line">Speed = <span class="number">-100</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Motor_SetSpeed(Speed);</span><br><span class="line">OLED_ShowSignedNum(<span class="number">1</span>, <span class="number">7</span>, Speed, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Delay.c</p><p>Delay.h</p><h1 id="七、TIM输入捕获"><a href="#七、TIM输入捕获" class="headerlink" title="七、TIM输入捕获"></a>七、TIM输入捕获</h1><p>IC（Input Capture）输入捕获</p><p>输入捕获模式下，当通道输入引脚出现指定电平跳变时，当前CNT的值将被锁存到CCR中，可用于测量PWM波形的频率、占空比、脉冲间隔、电平持续时间等参数</p><p>每个高级定时器和通用定时器都拥有4个输入捕获通道</p><p>可配置为PWMI模式，同时测量频率和占空比</p><p>可配合主从触发模式，实现硬件全自动测量</p><h2 id="7-1频率测量"><a href="#7-1频率测量" class="headerlink" title="7.1频率测量"></a>7.1频率测量</h2><p>测频法：在闸门时间T内，对上升沿计次，得到N，则频率【f<del>x</del>&#x3D;N &#x2F; T】</p><p>测周法：两个上升沿内，以标准频率fc计次，得到N ，则频率【f<del>x</del>&#x3D;f<del>c</del>&#x2F; N】</p><p>中界频率：测频法与测周法误差相等的频率点【f<del>m</del>&#x3D;√(f<del>c</del>&#x2F; T)】</p><img src="https://s2.loli.net/2022/12/01/iwBxrNQ9lemUspj.png" alt="image-20221201160008905" style="zoom:80%;" /><h2 id="7-2输入捕获通道"><a href="#7-2输入捕获通道" class="headerlink" title="7.2输入捕获通道"></a>7.2输入捕获通道</h2><img src="https://s2.loli.net/2022/12/01/qOAbiGTH2BruX5Z.png" alt="image-20221201161146355" style="zoom: 60%;" /><img src="https://s2.loli.net/2022/12/01/5y3ou7gYpJHS1mj.png" alt="image-20221201164341495" style="zoom:67%;" /><h2 id="7-3主从触发模式"><a href="#7-3主从触发模式" class="headerlink" title="7.3主从触发模式"></a>7.3主从触发模式</h2><img src="https://s2.loli.net/2022/12/01/QTKJ9ghsqVcHA8u.png" alt="image-20221201164809908" style="zoom:67%;" /><h2 id="7-4两种捕获方式基本结构"><a href="#7-4两种捕获方式基本结构" class="headerlink" title="7.4两种捕获方式基本结构"></a>7.4两种捕获方式基本结构</h2><h3 id="7-4-1输入捕获基本结构"><a href="#7-4-1输入捕获基本结构" class="headerlink" title="7.4.1输入捕获基本结构"></a>7.4.1输入捕获基本结构</h3><p>触发源选择只有TI1和TI2，没有TI3和TI4，如果使用从模式自动清零CNT只能使用通道1和通道2</p><p>如果使用通道3和通道4只能开启捕获中断，手动清零</p><img src="https://s2.loli.net/2022/12/01/gXKEVBmvhZp8HGt.png" alt="image-20221201165935357" style="zoom:67%;" /><h3 id="7-4-2PWMI基本结构"><a href="#7-4-2PWMI基本结构" class="headerlink" title="7.4.2PWMI基本结构"></a>7.4.2PWMI基本结构</h3><img src="https://s2.loli.net/2022/12/01/aye2dWLN4b1qkYZ.png" alt="image-20221201170120062" style="zoom:67%;" /><h1 id="实例三、输入捕获模式测频率-amp-PWMI模式测频率占空比"><a href="#实例三、输入捕获模式测频率-amp-PWMI模式测频率占空比" class="headerlink" title="实例三、输入捕获模式测频率&amp;PWMI模式测频率占空比"></a>实例三、输入捕获模式测频率&amp;PWMI模式测频率占空比</h1><h2 id="3-1、输入捕获模式测频率"><a href="#3-1、输入捕获模式测频率" class="headerlink" title="3.1、输入捕获模式测频率"></a>3.1、输入捕获模式测频率</h2><p><strong>功能实现</strong>：PA0口输出，PA6口测量</p><p>IC.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">IC_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//开启时钟，TIM3是APB1的时钟外设</span></span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置GPIO</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);</span><br><span class="line"></span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;</span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;</span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择时基单元的时钟，可以不选，默认上电后选择内部时钟</span></span><br><span class="line">TIM_InternalClockConfig(TIM3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置时基单元</span></span><br><span class="line">TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;</span><br><span class="line">TIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;<span class="comment">//指定时钟分频</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;<span class="comment">//计数器模式</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Period = <span class="number">65536</span> - <span class="number">1</span>;<span class="comment">//ARR自动重装器的值</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Prescaler = <span class="number">72</span> - <span class="number">1</span>;<span class="comment">//PSC预分频器的值</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_RepetitionCounter = <span class="number">0</span>;<span class="comment">//重复计数器的值，高级定时器使用</span></span><br><span class="line"></span><br><span class="line">TIM_TimeBaseInit(TIM3,&amp;TIM_TimeBaseInitStructure);</span><br><span class="line"><span class="comment">//配置捕获单元</span></span><br><span class="line">TIM_ICInitTypeDef TIM_ICInitStructure;</span><br><span class="line">TIM_ICInitStructure.TIM_Channel = TIM_Channel_1;<span class="comment">//选择通道</span></span><br><span class="line">TIM_ICInitStructure.TIM_ICFilter = <span class="number">0xF</span>;<span class="comment">//选择输入捕获滤波器</span></span><br><span class="line">TIM_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_Rising;<span class="comment">//极性</span></span><br><span class="line">TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;<span class="comment">//选择分频器</span></span><br><span class="line">TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;</span><br><span class="line">TIM_ICInit(TIM3,&amp;TIM_ICInitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置TRGI的触发源</span></span><br><span class="line">TIM_SelectInputTrigger(TIM3, TIM_TS_TI1FP1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置从模式</span></span><br><span class="line">TIM_SelectSlaveMode(TIM3, TIM_SlaveMode_Reset);</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动定时器</span></span><br><span class="line">TIM_Cmd(TIM3,ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">IC_GetFreq</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1000000</span> / (TIM_GetCapture1(TIM3) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>IC.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __IC_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __IC_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">IC_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">IC_GetFreq</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>PWM.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PWM_Init</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启时钟，TIM2是APB1的时钟外设</span></span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置GPIO</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);</span><br><span class="line"></span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;</span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择时基单元的时钟，可以不选，默认上电后选择内部时钟</span></span><br><span class="line">TIM_InternalClockConfig(TIM2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置时基单元</span></span><br><span class="line">TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;</span><br><span class="line">TIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;<span class="comment">//指定时钟分频</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;<span class="comment">//计数器模式</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Period = <span class="number">100</span> - <span class="number">1</span>;<span class="comment">//ARR自动重装器的值</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Prescaler = <span class="number">720</span> - <span class="number">1</span>;<span class="comment">//PSC预分频器的值</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_RepetitionCounter = <span class="number">0</span>;<span class="comment">//重复计数器的值，高级定时器使用</span></span><br><span class="line"></span><br><span class="line">TIM_TimeBaseInit(TIM2,&amp;TIM_TimeBaseInitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化输出比较单元</span></span><br><span class="line">TIM_OCInitTypeDef TIM_OCInitStructure;</span><br><span class="line"><span class="comment">//不论是否使用，都先赋一个初值，避免出现奇奇怪怪的错误。赋值后再更改需要的参数即可</span></span><br><span class="line">TIM_OCStructInit(&amp;TIM_OCInitStructure);<span class="comment">//结构体赋初始值</span></span><br><span class="line">TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;<span class="comment">//设置输出比较模式</span></span><br><span class="line">TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;<span class="comment">//设置输出比较极性</span></span><br><span class="line">TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;<span class="comment">//设置输出使能</span></span><br><span class="line">TIM_OCInitStructure.TIM_Pulse = <span class="number">0</span>;<span class="comment">//设置CCR</span></span><br><span class="line">TIM_OC1Init(TIM2, &amp;TIM_OCInitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动定时器</span></span><br><span class="line">TIM_Cmd(TIM2,ENABLE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PWM_SetCompare1</span><span class="params">(<span class="type">uint16_t</span> Compare)</span><span class="comment">//改变占空比</span></span><br><span class="line">&#123;</span><br><span class="line">TIM_SetCompare1(TIM2, Compare);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PWM_SetPrescaler</span><span class="params">(<span class="type">uint16_t</span> Prescaler)</span><span class="comment">//改变频率</span></span><br><span class="line">&#123;</span><br><span class="line">TIM_PrescalerConfig(TIM2, Prescaler, TIM_PSCReloadMode_Update);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>PWM.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __PWM_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __PWM_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PWM_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">PWM_SetCompare1</span><span class="params">(<span class="type">uint16_t</span> Compare)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">PWM_SetPrescaler</span><span class="params">(<span class="type">uint16_t</span> Prescaler)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;PWM.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;OLED.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;IC.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> i;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">OLED_Init();</span><br><span class="line">PWM_Init();</span><br><span class="line">IC_Init();</span><br><span class="line"></span><br><span class="line">OLED_ShowString(<span class="number">1</span>,<span class="number">1</span>,<span class="string">&quot;Freq:00000HZ&quot;</span>);</span><br><span class="line">PWM_SetCompare1(<span class="number">50</span>);</span><br><span class="line">PWM_SetPrescaler(<span class="number">720</span><span class="number">-1</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">OLED_ShowNum(<span class="number">1</span>,<span class="number">6</span>,IC_GetFreq(),<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>OLED.c</p><p>OLED.h</p><h2 id="3-2、PWMI模式测量占空比"><a href="#3-2、PWMI模式测量占空比" class="headerlink" title="3.2、PWMI模式测量占空比"></a>3.2、PWMI模式测量占空比</h2><p><strong>功能实现</strong>：PA0口输出，PA6口测量，双通道分别测量频率和占空比</p><p><strong>注意</strong>：可以使用TIM_PWMIConfig函数直接配置另一个通道</p><p>IC.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">IC_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//开启时钟，TIM3是APB1的时钟外设</span></span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置GPIO</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);</span><br><span class="line"></span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;</span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;</span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择时基单元的时钟，可以不选，默认上电后选择内部时钟</span></span><br><span class="line">TIM_InternalClockConfig(TIM3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置时基单元</span></span><br><span class="line">TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;</span><br><span class="line">TIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;<span class="comment">//指定时钟分频</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;<span class="comment">//计数器模式</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Period = <span class="number">65536</span> - <span class="number">1</span>;<span class="comment">//ARR自动重装器的值</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Prescaler = <span class="number">72</span> - <span class="number">1</span>;<span class="comment">//PSC预分频器的值</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_RepetitionCounter = <span class="number">0</span>;<span class="comment">//重复计数器的值，高级定时器使用</span></span><br><span class="line"></span><br><span class="line">TIM_TimeBaseInit(TIM3,&amp;TIM_TimeBaseInitStructure);</span><br><span class="line"></span><br><span class="line">TIM_ICInitTypeDef TIM_ICInitStructure;</span><br><span class="line">TIM_ICInitStructure.TIM_Channel = TIM_Channel_1;<span class="comment">//选择通道</span></span><br><span class="line">TIM_ICInitStructure.TIM_ICFilter = <span class="number">0xF</span>;<span class="comment">//选择输入捕获滤波器</span></span><br><span class="line">TIM_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_Rising;<span class="comment">//极性</span></span><br><span class="line">TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;<span class="comment">//选择分频器</span></span><br><span class="line">TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置另一个通道的参数</span></span><br><span class="line">TIM_PWMIConfig(TIM3,&amp;TIM_ICInitStructure);</span><br><span class="line"></span><br><span class="line">TIM_ICInit(TIM3,&amp;TIM_ICInitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置TRGI的触发源</span></span><br><span class="line">TIM_SelectInputTrigger(TIM3, TIM_TS_TI1FP1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置从模式</span></span><br><span class="line">TIM_SelectSlaveMode(TIM3, TIM_SlaveMode_Reset);</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动定时器</span></span><br><span class="line">TIM_Cmd(TIM3,ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">IC_GetFreq</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1000000</span> / (TIM_GetCapture1(TIM3) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">IC_GetDuty</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (TIM_GetCapture2(TIM3) + <span class="number">1</span>) * <span class="number">100</span> / (TIM_GetCapture1(TIM3) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>IC.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __IC_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __IC_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">IC_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">IC_GetFreq</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">IC_GetDuty</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>PWM.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PWM_Init</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启时钟，TIM2是APB1的时钟外设</span></span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置GPIO</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);</span><br><span class="line"></span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;</span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择时基单元的时钟，可以不选，默认上电后选择内部时钟</span></span><br><span class="line">TIM_InternalClockConfig(TIM2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置时基单元</span></span><br><span class="line">TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;</span><br><span class="line">TIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;<span class="comment">//指定时钟分频</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;<span class="comment">//计数器模式</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Period = <span class="number">100</span> - <span class="number">1</span>;<span class="comment">//ARR自动重装器的值</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Prescaler = <span class="number">720</span> - <span class="number">1</span>;<span class="comment">//PSC预分频器的值</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_RepetitionCounter = <span class="number">0</span>;<span class="comment">//重复计数器的值，高级定时器使用</span></span><br><span class="line"></span><br><span class="line">TIM_TimeBaseInit(TIM2,&amp;TIM_TimeBaseInitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化输出比较单元</span></span><br><span class="line">TIM_OCInitTypeDef TIM_OCInitStructure;</span><br><span class="line"><span class="comment">//不论是否使用，都先赋一个初值，避免出现奇奇怪怪的错误。赋值后再更改需要的参数即可</span></span><br><span class="line">TIM_OCStructInit(&amp;TIM_OCInitStructure);<span class="comment">//结构体赋初始值</span></span><br><span class="line">TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;<span class="comment">//设置输出比较模式</span></span><br><span class="line">TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;<span class="comment">//设置输出比较极性</span></span><br><span class="line">TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;<span class="comment">//设置输出使能</span></span><br><span class="line">TIM_OCInitStructure.TIM_Pulse = <span class="number">0</span>;<span class="comment">//设置CCR</span></span><br><span class="line">TIM_OC1Init(TIM2, &amp;TIM_OCInitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动定时器</span></span><br><span class="line">TIM_Cmd(TIM2,ENABLE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PWM_SetCompare1</span><span class="params">(<span class="type">uint16_t</span> Compare)</span><span class="comment">//改变占空比</span></span><br><span class="line">&#123;</span><br><span class="line">TIM_SetCompare1(TIM2, Compare);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PWM_SetPrescaler</span><span class="params">(<span class="type">uint16_t</span> Prescaler)</span><span class="comment">//改变频率</span></span><br><span class="line">&#123;</span><br><span class="line">TIM_PrescalerConfig(TIM2, Prescaler, TIM_PSCReloadMode_Update);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>PWM.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __PWM_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __PWM_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PWM_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">PWM_SetCompare1</span><span class="params">(<span class="type">uint16_t</span> Compare)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">PWM_SetPrescaler</span><span class="params">(<span class="type">uint16_t</span> Prescaler)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;PWM.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;OLED.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;IC.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> i;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">OLED_Init();</span><br><span class="line">PWM_Init();</span><br><span class="line">IC_Init();</span><br><span class="line"></span><br><span class="line">OLED_ShowString(<span class="number">1</span>,<span class="number">1</span>,<span class="string">&quot;Freq:00000HZ&quot;</span>);</span><br><span class="line">OLED_ShowString(<span class="number">2</span>,<span class="number">1</span>,<span class="string">&quot;Duty:00%&quot;</span>);</span><br><span class="line">PWM_SetPrescaler(<span class="number">7200</span><span class="number">-1</span>);</span><br><span class="line">PWM_SetCompare1(<span class="number">90</span>);</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">OLED_ShowNum(<span class="number">1</span>,<span class="number">6</span>,IC_GetFreq(),<span class="number">5</span>);</span><br><span class="line">OLED_ShowNum(<span class="number">2</span>,<span class="number">6</span>,IC_GetDuty(),<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>OLED.c</p><p>OLED.h</p><h1 id="八、TIM编码器接口"><a href="#八、TIM编码器接口" class="headerlink" title="八、TIM编码器接口"></a>八、TIM编码器接口</h1><p>Encoder Interface 编码器接口</p><p>编码器接口可接收增量（正交）编码器的信号，根据编码器旋转产生的正交信号脉冲，<strong>自动控制</strong>CNT自增或自减，从而指示编码器的位置、旋转方向和旋转速度</p><p>每个高级定时器和通用定时器都拥有1个编码器接口</p><p>两个输入引脚借用了输入捕获的通道1和通道2</p><h2 id="8-1正交编码器"><a href="#8-1正交编码器" class="headerlink" title="8.1正交编码器"></a>8.1正交编码器</h2><p>正交信号：正转和反转的位相相差90°</p><p>正交信号的优势：精度高、可以抗噪声</p><img src="https://s2.loli.net/2022/12/05/AfoNHy53CXz1uEx.png" alt="image-20221205152215829" style="zoom:67%;" /><h2 id="8-2编码器接口基本结构"><a href="#8-2编码器接口基本结构" class="headerlink" title="8.2编码器接口基本结构"></a>8.2编码器接口基本结构</h2><p>参考手册框图：</p><img src="https://s2.loli.net/2022/12/05/Nfxs8T6S1ukdUFE.png" alt="image-20221205152823861" style="zoom: 50%;" /><p>简化原理图：</p><img src="https://s2.loli.net/2022/12/05/ZUFhknQsEprIGBw.png" alt="image-20221205154038636"  /><h2 id="8-3工作模式"><a href="#8-3工作模式" class="headerlink" title="8.3工作模式"></a>8.3工作模式</h2><img src="https://s2.loli.net/2022/12/05/38ndzXlUQWKbLO2.png" alt="image-20221205154147591" style="zoom: 50%;" /><h1 id="实例四编码器接口测速"><a href="#实例四编码器接口测速" class="headerlink" title="实例四编码器接口测速"></a>实例四编码器接口测速</h1><p>Encoder.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Encoder_Init</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"><span class="comment">//开启时钟，TIM3是APB1的时钟外设</span></span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置GPIO</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);</span><br><span class="line"></span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;</span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6|GPIO_Pin_7;</span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//编码器接口是一个带方向控制的外部时钟，所以内部时钟不需要</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//选择时基单元的时钟，可以不选，默认上电后选择内部时钟</span></span><br><span class="line"><span class="comment">//TIM_InternalClockConfig(TIM3);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置时基单元</span></span><br><span class="line">TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;</span><br><span class="line">TIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;<span class="comment">//指定时钟分频</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;<span class="comment">//计数器模式</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Period = <span class="number">65536</span> - <span class="number">1</span>;<span class="comment">//ARR自动重装器的值，满量程，容易转换成负数</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Prescaler = <span class="number">1</span> - <span class="number">1</span>;<span class="comment">//PSC预分频器的值，不分频</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_RepetitionCounter = <span class="number">0</span>;<span class="comment">//重复计数器的值，高级定时器使用</span></span><br><span class="line"></span><br><span class="line">TIM_TimeBaseInit(TIM3,&amp;TIM_TimeBaseInitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置捕获单元</span></span><br><span class="line">TIM_ICInitTypeDef TIM_ICInitStructure;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体配置不完整，所以需要默认初始化</span></span><br><span class="line"><span class="comment">//通道1</span></span><br><span class="line">TIM_ICInitStructure.TIM_Channel = TIM_Channel_1;<span class="comment">//选择通道</span></span><br><span class="line">TIM_ICInitStructure.TIM_ICFilter = <span class="number">0xF</span>;<span class="comment">//选择输入捕获滤波器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//后面仍会配置极性，后面的会覆盖前面的，可以删去</span></span><br><span class="line"><span class="comment">//TIM_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_Rising;//极性，上升沿，不反向</span></span><br><span class="line"><span class="comment">//这两项编码器用不到，可以删去，但是删去后结构体配置不完整，需要初始化一下</span></span><br><span class="line"><span class="comment">//TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;//选择分频器</span></span><br><span class="line"><span class="comment">//TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;</span></span><br><span class="line"></span><br><span class="line">TIM_ICInit(TIM3,&amp;TIM_ICInitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置通道2</span></span><br><span class="line">TIM_ICInitStructure.TIM_Channel = TIM_Channel_1;<span class="comment">//选择通道</span></span><br><span class="line">TIM_ICInitStructure.TIM_ICFilter = <span class="number">0xF</span>;<span class="comment">//选择输入捕获滤波器</span></span><br><span class="line">TIM_ICInit(TIM3,&amp;TIM_ICInitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置编码器接口</span></span><br><span class="line">    TIM_EncoderInterfaceConfig(TIM3,TIM_EncoderMode_TI12,TIM_ICPolarity_Rising,TIM_ICPolarity_Rising);</span><br><span class="line"></span><br><span class="line">TIM_Cmd(TIM3,ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int16_t</span> <span class="title function_">Encoder_Get</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"><span class="type">int16_t</span> temp;</span><br><span class="line">temp = TIM_GetCounter(TIM3);</span><br><span class="line">TIM_SetCounter(TIM3,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Encoder.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __ENCODER_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __ENCODER_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Encoder_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int16_t</span> <span class="title function_">Encoder_Get</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Timer.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer_Init</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"><span class="comment">//开启时钟，TIM2是APB1的时钟外设</span></span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//选择时基单元的时钟，可以不选，默认上电后选择内部时钟</span></span><br><span class="line">TIM_InternalClockConfig(TIM2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置时基单元</span></span><br><span class="line">TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;</span><br><span class="line">TIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;<span class="comment">//指定时钟分频</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;<span class="comment">//计数器模式</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Period = <span class="number">10000</span> - <span class="number">1</span>;<span class="comment">//ARR自动重装器的值</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Prescaler = <span class="number">7200</span> - <span class="number">1</span>;<span class="comment">//PSC预分频器的值</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_RepetitionCounter = <span class="number">0</span>;<span class="comment">//重复计数器的值，高级定时器使用</span></span><br><span class="line"></span><br><span class="line">TIM_TimeBaseInit(TIM2,&amp;TIM_TimeBaseInitStructure);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//手动清除中断标志位，避免刚初始化完就进入中断</span></span><br><span class="line">TIM_ClearFlag(TIM2,TIM_IT_Update);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使能中断</span></span><br><span class="line">TIM_ITConfig(TIM2,TIM_IT_Update,ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置NVIC</span></span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);</span><br><span class="line">NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">2</span>;</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">1</span>;</span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动定时器</span></span><br><span class="line">TIM_Cmd(TIM2,ENABLE);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Timer.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __TIMER_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __TIMER_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;OLED.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Timer.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Encoder.h&quot;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="type">int16_t</span> speed;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">OLED_Init();</span><br><span class="line">Timer_Init();</span><br><span class="line">Encoder_Init();</span><br><span class="line"></span><br><span class="line">OLED_ShowString(<span class="number">1</span>,<span class="number">1</span>,<span class="string">&quot;SPEED:&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123; </span><br><span class="line"><span class="comment">//OLED_ShowNum(1,5,num,5);</span></span><br><span class="line">OLED_ShowSignedNum(<span class="number">2</span>,<span class="number">1</span>,speed,<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TIM2_IRQHandler</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"><span class="comment">//判断中断</span></span><br><span class="line"><span class="keyword">if</span>(TIM_GetITStatus(TIM2,TIM_IT_Update) == SET)&#123;</span><br><span class="line">speed = Encoder_Get();</span><br><span class="line"><span class="comment">//清除中断标志位</span></span><br><span class="line">TIM_ClearITPendingBit(TIM2,TIM_IT_Update);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>OLED.c</p><p>OLED.h</p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/4a17b156.html"/>
      <url>/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
